AC_INIT(vegastrike, 0.4.0)
AC_CONFIG_SRCDIR(src/vegastrike.h)
AC_PREREQ(2.53)

AC_LANG(C++)
dnl AC_LANG_CPLUSPLUS()

if test "x${CXX}" = "x"; then
AC_MSG_CHECKING([Checking for C++ compiler.])
AC_CHECK_TOOLS(CXX, [g++ c++ cl KCC CC cxx c++ xlC aCC egcs gcc])
fi

if test "x${CXX}" = "x"; then
AC_MSG_ERROR([No compiler found, specify one with the environment variable CXX.])
fi

AC_PROG_CXX(${CXX})
AC_PROG_CXXCPP
AC_PROG_CPP

AC_MSG_NOTICE([Using compiler: ${CXX}.])
dnl Check system type

AC_CANONICAL_BUILD()
AC_CANONICAL_HOST()
AC_CANONICAL_TARGET()

AM_INIT_AUTOMAKE()
AM_CONFIG_HEADER(config.h)


AH_TEMPLATE(BSD, [Is this a BSD variant?])
AH_TEMPLATE(POSIX, [Is this a known POSIX-compliant system?])
AH_TEMPLATE(UNIX, [Is this a known UNIX variant?])
AH_TEMPLATE(WIN32, [Is this Windows?])
AH_TEMPLATE(WIN32_POSIX, [Is this MingW, Cygwin, or a variant POSIX layer?])

AH_TEMPLATE(LINUX, [Is this Linux?])
AH_TEMPLATE(MACOSX, [Is this MacOS X?])

case $target in
*freebsd* | *netbsd* | *openbsd*)
	AC_DEFINE(BSD, 1)
	AC_DEFINE(POSIX,1)
	AC_DEFINE(UNIX,1)
;;
*linux*)
	AC_DEFINE(LINUX, 1)
	AC_DEFINE(POSIX,1)
	AC_DEFINE(UNIX,1)
	slabcheck=yes;
;;
*mingw* | *cygwin*)
	AC_DEFINE(WIN32_POSIX, 1)
	AC_DEFINE(WIN32, 1)
;;
*win32*)
	AC_DEFINE(WIN32, 1)
;;
*Darwin* | *darwin*)
	AC_DEFINE(MACOSX, 1)
	AC_DEFINE(POSIX, 1)
	AC_DEFINE(BSD, 199999)
;;
*)
	slabcheck=no;
;;
esac                                             


dnl Check for compilers.  We set CXXFLAGS to null if unset, so
dnl that these macros won't set them to default values that we don't want.
CPPFLAGS=""
CXXFLAGS=""
dnl unfortunately most users (eg hellcatv) are too stupid to figure out where that environment variable is set (it's not in env or set or echo $CPPFLAGS gives nothing) so we have to force it to null
if test "x${CXXFLAGS:-notset}" = "xnotset" ; then
    export CXXFLAGS
    CXXFLAGS=""
fi

if test "x${CPPFLAGS:-notset}" = "xnotset" ; then
    export CPPFLAGS
    CPPFLAGS=""
fi


dnl AC_GNU_SOURCE()
AC_AIX()
AC_MINIX()
AC_ISC_POSIX()
saved_CXXFLAGS="${CXXFLAGS}"
CXXFLAGS="-falign-loops=4"
AC_TRY_COMPILE(, , [falign=yes], [falign=no])
CXXFLAGS="-malign-loops=4"
AC_TRY_COMPILE(, , [malign=yes], [malign=no])
CXXFLAGS="${saved_CXXFLAGS}"

case $target in
  *Darwin* | *darwin*)
    bsdthread=no
    ;;
  *cygwin*)
    bsdthread=no
    ;;
  *mingw*)
    bsdthread=no
    ;;
  *)
    saved_CXXFLAGS="${CXXFLAGS}"
    CXXFLAGS="-Werror -pthread"
    AC_TRY_COMPILE(, , [bsdthread=yes], [bsdthread=no])
    CXXFLAGS="${saved_CXXFLAGS}"
    ;;
esac

AC_PROG_INSTALL()
AC_PROG_LN_S()
AC_PROG_RANLIB()

dnl Checks for header files.
dnl AC_HEADER_STDC()
AC_HEADER_DIRENT()
AC_FUNC_ALLOCA()
AC_HEADER_SYS_WAIT()

AC_CHECK_HEADERS([OS.h arpa/inet.h fcntl.h float.h limits.h math.h netdb.h netinet/in.h stddef.h sys/ioctl.h sys/param.h sys/time.h sys/timeb.h values.h wchar.h wctype.h])

if test "x$slabcheck" = "xyes"; then
AC_CHECK_HEADERS([linux/slab.h linux/malloc.h])
else
AC_CHECK_HEADERS([malloc.h])
fi

AC_CHECK_FUNCS(vfscanf)


dnl AC_CXX_HAVE_STD()
dnl AC_CXX_HAVE_STL()
dnl AC_CXX_PARTIAL_SPECIALIZATION()

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST()
AC_HEADER_TIME()
AC_C_INLINE()
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_TYPE_UID_T


AC_FUNC_CLOSEDIR_VOID
AC_FUNC_MEMCMP
AC_FUNC_MMAP
AC_FUNC_SELECT_ARGTYPES
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF


dnl Checks for library functions.

AC_CHECK_FUNCS([access atexit bzero clock_gettime floor getcwd gethostbyname gethostname gettimeofday inet_ntoa lstat memmove memset mkdir munmap pow select socket sqrt strcasecmp strchr strdup strerror strstr strtol])

dnl Check for non-standard floating point functions and headers

AC_CHECK_FUNCS([finite _finite isnan _isnan])

AC_CHECK_HEADERS([ieeefp.h zlib.h])

dnl --------------------------------------------------------------------------
dnl General options
dnl --------------------------------------------------------------------------
VS_CPPFLAGS=""
VS_CXXFLAGS="-pipe "
VS_LIBS=""

if test "x${falign}" = "xyes"; then
VS_ALIGN="-falign-loops=2 -falign-jumps=2 -falign-functions=2"
else if test "x${malign}" = "xyes"; then
VS_ALIGN="-malign-loops=2 -malign-jumps=2 -malign-functions=2"
else VS_ALIGN=""
fi
fi


if test "x${bsdthread}" = "xyes"; then
PTHREAD_CXXFLAGS="-pthread"
PTHREAD_LIBS="-pthread"
else
PTHREAD_CXXFLAGS="-D_REENTRANT"
PTHREADS_LIBS="-lpthread"
fi


AC_ARG_ENABLE(flags, AC_HELP_STRING([--enable-flags=opts], [Set specific flags for the compiler]), userflags=${enableval})


if !(test "x${userflags}" = "xno" || test "x${userflags}" = "") ; then

saved_CXXFLAGS="${CXXFLAGS}"
CXXFLAGS="$userflags"
AC_TRY_COMPILE(, , [userflagged=yes], [userflagged=no])
CXXFLAGS="${saved_CXXFLAGS}"

if test "x${userflagged}" = "xyes"; then
	USER_FLAGS="${userflags}"
	echo "Enabling user-specified flags: $userflags"
else
	echo "Invalid flags specified. Ignoring."
fi
fi

saved_CXXFLAGS="${CXXFLAGS}"
case $target in
  *freebsd* | *netbsd* | *openbsd* | *linux*)
    CXXFLAGS="-gdwarf-2 -g3 -Werror"
    AC_TRY_COMPILE(, , [gwarf2g3_supported=yes], [gwarf2g3_supported=no])
    ;;
  *)
    CXXFLAGS="-g3 -Werror"
    gwarf2g3_supported=no
    ;;
esac
CXXFLAGS="${saved_CXXFLAGS}"

if test "x$gwarf2g3_supported" = "xyes"; then
	DEBUG_FLAGS="-gdwarf-2 -g3"
else
    saved_CXXFLAGS="${CXXFLAGS}"
    CXXFLAGS="-g3"
    AC_TRY_COMPILE(, , [g3_supported=yes], [g3_supported=no])
    CXXFLAGS="${saved_CXXFLAGS}"

    if test "x$g3_supported" = "xyes"; then
	    DEBUG_FLAGS="-ggdb3"
    else
	    DEBUG_FLAGS="-g"
    fi
fi

AC_ARG_ENABLE(ggdb3, AC_HELP_STRING([--enable-ggdb3], [Add the -ggdb3 compiler flag.]), DEBUG_FLAGS="-ggdb3")

AC_ARG_ENABLE(debug, AC_HELP_STRING([--enable-debug], [Produce an executable with debugging symbols]), [VS_CXXFLAGS="${VS_CXXFLAGS} ${DEBUG_FLAGS}"])

AC_ARG_ENABLE(release, AC_HELP_STRING([--enable-release], [Produce an executable with optimizations]), [VS_CXXFLAGS="${VS_CXXFLAGS} -O2 -ffast-math"])

AC_ARG_ENABLE(profile, AC_HELP_STRING([--enable-profile], [Produce an executable with profiling code]),  [VS_CXXFLAGS="${VS_CXXFLAGS} -pg"])

AC_ARG_ENABLE(wall, AC_HELP_STRING([--enable-wall], [Use the -Wall flag with the compiler.]), [VS_CXXFLAGS="${VS_CXXFLAGS} -Wall"])

AC_ARG_ENABLE(pedantic, AC_HELP_STRING([--enable-pedantic], [Enable -pedantic (and -ansi for C) modes]), [VS_CXXFLAGS="${VS_CXXFLAGS} -pedantic"])

AC_ARG_ENABLE(macosx_bundle, AC_HELP_STRING([--enable-macosx-bundle], [Produce a MacOSX bundle executable]),  [VS_CPPFLAGS="${VS_CPPFLAGS} -DWITH_MACOSX_BUNDLE=1"])


VS_CXXFLAGS="${VS_CXXFLAGS} ${VS_ALIGN} ${USER_FLAGS}"

dnl --------------------------------------------------------------------------
dnl Check if compiling for Win32
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for Win32 platform])
AC_EGREP_CPP(yes,
[ 
#if defined(WIN32) || defined(_WIN32)
  yes
#endif
], is_win32=yes, is_win32=no )
AC_MSG_RESULT(${is_win32})

dnl Add libs required for Windows
dnl I don't use -mwindows since I like having the console around
dnl If the console annoys you then remove "-luser32 -lgdi32" and replace
dnl with "-mwindows"
WIN32="0"
if test "x${is_win32}" = "xyes" ; then
	VS_LIBS="${VS_LIBS} -luser32 -lgdi32"
	VS_CPPFLAGS="${VS_CXXFLAGS} -DNOMINMAX"
	WIN32="1"
fi

AC_MSG_CHECKING([for CygWin platform])
AC_EGREP_CPP(yes,
[ 
#if defined(__CYGWIN__)
  yes
#endif
], is_cygwin=yes, is_cygwin=no )
AC_MSG_RESULT(${is_cygwin})

AC_MSG_CHECKING([for Mingw32 platform])
AC_EGREP_CPP(yes,
[ 
#if defined(__MINGW32__)
  yes
#endif
], is_mingw=yes, is_mingw=no )
AC_MSG_RESULT(${is_mingw})
if test "x${is_mingw}" = "xyes" ; then
	VS_LIBS="${VS_LIBS} -L/usr/lib/w32api -lwsock32"
fi

dnl --------------------------------------------------------------------------
dnl Check if compiling for Linux
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for Linux platform])
AC_EGREP_CPP(yes,
[ 
#if defined(linux)
  yes
#endif
], is_linux=yes, is_linux=no )
AC_MSG_RESULT(${is_linux})

dnl Add libs required for Windows
dnl I don't use -mwindows since I like having the console around
dnl If the console annoys you then remove "-luser32 -lgdi32" and replace
dnl with "-mwindows"
LINUX="0"
if test "x$is_linux" = "xyes" ; then
	LINUX="1"
fi

dnl --------------------------------------------------------------------------
dnl Check if compiling for FreeBSD 
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for FreeBSD platform])
AC_EGREP_CPP(yes,
[ 
#if defined(__FreeBSD__)
  yes
#endif
], [is_freebsd=yes], [is_freebsd=no] )
AC_MSG_RESULT([${is_freebsd}])
#if test "x$is_freebsd" = "xyes" ; then
#    VS_LIBS="$VS_LIBS -lutil"
#fi
dnl --------------------------------------------------------------------------
dnl Check if compiling for MacOSX
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for MacOSX platform])
AC_EGREP_CPP(yes,
[ 
#if defined(__APPLE__) || defined(MACOSX)
  yes
#endif
], [is_macosx=yes], [is_macosx=no] )
AC_MSG_RESULT([${is_macosx}])

if test "x$is_macosx" = "xyes" ; then
	CXXFLAGS="$CXXFLAGS -I/System/Library/Frameworks/Carbon.framework/Libraries/CIncludes"
	CPPFLAGS="$CPPFLAGS -Wno-long-double"
    dnl GL_CPPFLAGS="$GL_CPPFLAGS -framework OpenGL"
    dnl GLUT_CPPFLAGS="$GLUT_CPPFLAGS -framework GLUT"
	VS_LIBS="$VS_LIBS -framework OpenGL -framework GLUT"
    with_gl_inc=/System/Library/Frameworks/Carbon.framework/Libraries/CIncludes
    with_gl_libs=/System/Library/Frameworks/OpenGL.framework/Libraries
    with_al_inc=/Library/Frameworks/OpenAL.framework/Headers
    with_al_libs=/Library/Frameworks/OpenAL.framework/
    with_expat_libs=/sw/lib
    with_png_libs=/sw/lib
    with_jpeg_libs=/sw/lib
    with_jpeg_inc=/sw/include
    with_expat_inc=/sw/include
    with_png_inc=/sw/include
    PYTHON_LDOPTS="-L/Library/Frameworks/Python.framework"
    with_python_inc=/Library/Frameworks/Python.framework/Headers
    VS_LIBS="$VS_LIBS -lobjc"
else
    VS_LIBS="$VS_LIBS -lutil"
fi

dnl
dnl check for Python
dnl
dnl for now support automake versions < 1.5 for 2 reasons:
dnl  - it is not available on some distros (SuSE, RedHat, ...)
dnl  - it can not find python 2.2 in many other cases (debian, ...)
dnl 
dnl AM_PATH_PYTHON(2.2)
dnl
AC_MSG_CHECKING([for python])

FOUND_PYTHON=no
PYTHON_CXXFLAGS=""
PYTHON_LIBS=""

PYTHON_binchk="python python2 python2.2 python2.3"
for i in ${PYTHON_binchk};
do
    PYTHON_check=`$i -V 2>/dev/null; echo $?`
    if test ${PYTHON_check} -eq 0;
    then
        FOUND_PYTHON=yes
    fi

    dnl
    dnl Change autoconf quote characters temporarily.
    dnl
    changequote(<<, >>)dnl

    if test "x${FOUND_PYTHON}" = "xyes";
    then
        PYTHON_VERSION=`$i -V 2>&1 | awk "{print $NF}"`
        if test `echo ${PYTHON_VERSION} | sed -e 's/\./ /g; s/[a-z|A-Z|+]/ /g' | awk '{print $1$2}'` -ge 22;
        then
            FOUND_PYTHON=yes
            PYTHON_SHORT=`echo ${PYTHON_VERSION} | sed -e 's/\./ /g; s/[a-z|A-Z|+]/ /g' | awk '{print $1"."$2}'`
            PYTHON_incchk="/usr/include/python /usr/include/python${PYTHON_SHORT} /usr/local/include/python /usr/local/include/python${PYTHON_SHORT} /sw/include/python /sw/include/python${PYTHON_SHORT}"

	    PYTHON_incdir=""
	    if test "x${FOUND_PYTHON}" = "xyes";
	    then
    	        for i in ${PYTHON_incchk};
    	        do
                    if test -f "$i/Python.h";
	            then
            	        PYTHON_incdir=$i
            	        break
                    fi
    	        done
	    fi

	    if test "x${PYTHON_incdir}" = "x";
	    then
    	        FOUND_PYTHON=no
	    fi
        else
            FOUND_PYTHON=no
        fi
    fi

    dnl
    dnl Reset autoconf quote characters to brackets.
    dnl
    changequote([, ])dnl

    if test "x${FOUND_PYTHON}" = "xyes";
    then
        PYTHON=$i
        break
    fi
done

if test "x${FOUND_PYTHON}" = "xno";
then
    AC_MSG_ERROR([*** Python version 2.2 or later not found!])
fi
AC_MSG_RESULT([python ${PYTHON_VERSION}])

dnl Simple check for libpython2.2.so
if test "x${FOUND_PYTHON}" = "xyes";
then
    FOUND_LIBPYTHON_SO=no
    PYTHON_libchk="/usr/lib /usr/local/lib /sw/lib/python${PYTHON_SHORT}/config /usr/lib/python${PYTHON_SHORT} /usr/lib/python${PYTHON_SHORT}/config /usr/local/lib/python${PYTHON_SHORT} /usr/local/lib/python${PYTHON_SHORT}/config /lib/python2.2/config"
    for i in ${PYTHON_libchk};
    do
	
        if test -f $i/libpython${PYTHON_SHORT}.so;
        then
	    echo "$i/libpython${PYTHON_SHORT}.so yes"
	    PYTHON_CXXFLAGS="-I${PYTHON_incdir}"
	    if test "x$is_macosx" = "xyes" ; then
	    	    PYTHON_LIBS="-lpython${PYTHON_SHORT} --export-dynamic"
	    else
		    PYTHON_LIBS="-lpython${PYTHON_SHORT} -Xlinker -export-dynamic"
	    fi
            FOUND_LIBPYTHON_SO=yes
            break
	else
          if test -f $i/libpython${PYTHON_SHORT}.a;	   
	  then
            echo "$i/libpython${PYTHON_SHORT}.a yes"
    	    PYTHON_CXXFLAGS="-I${PYTHON_incdir}"
	    if test "x$is_macosx" = "xyes" ; then
	    	    PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.a --export-dynamic"
	    else
	    	    PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.a  -Xlinker -export-dynamic"
	    fi
            FOUND_LIBPYTHON_SO=yes
	    break
          else
            if test -f $i/libpython${PYTHON_SHORT}.dll.a;	   
	    then
    	      PYTHON_CXXFLAGS="-I${PYTHON_incdir}"
              echo "$i/libpython${PYTHON_SHORT}.dll.a yes"
	      PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.dll.a  -Xlinker -export-dynamic"
              FOUND_LIBPYTHON_SO=yes
            else
              echo "$i/libpython${PYTHON_SHORT}.so no"
            fi
	  fi
        fi
    done
fi

dnl if test "x${FOUND_LIBPYTHON_SO}" = "xyes";
dnl then
dnl    PYTHON_CFLAGS="-I${PYTHON_incdir}"
dnl    PYTHON_LIBS="-lpython${PYTHON_SHORT}"
dnl fi

if test "x${FOUND_LIBPYTHON_SO}" = "xno";
then
    echo
    echo "Missing {python-prefix}/lib/libpython${PYTHON_SHORT}.so"
    echo "Try to create the shared library using (root priviledge required):"
    echo "    su -c 'sh ./build_libpython_so.sh'"
    echo
    AC_MSG_WARN([*** Python shared library not found!])
else
    PYTHON_CPPFLAGS="$PYTHON_CPPFLAGS $PYTHON_CXXFLAGS -DHAVE_PYTHON=1 "
fi
AC_SUBST(PYTHON_LIBS)
dnl --------------------------------------------------------------------------
dnl Check for car sim
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(car, AC_HELP_STRING([--enable-car], [Produce an executable for car simulation]), [VS_CPPFLAGS="${VS_CPPFLAGS} -DCAR_SIM"; echo "making car simulator"])

dnl --------------------------------------------------------------------------
dnl Check for SDL
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(sdl, AC_HELP_STRING([--disable-sdl], [Use GLUT instead of SDL]), _sdl=$enableval)
if test "x$_sdl" != "xno" ; then

SDL_VERSION=1.0.1
AM_PATH_SDL($SDL_VERSION, have_SDL=yes, have_SDL=no)

if test "x$have_SDL" = "xyes" ; then
    VS_CPPFLAGS="${VS_CPPFLAGS} -DHAVE_SDL=1"
    VS_CXXFLAGS="${VS_CXXFLAGS} ${SDL_CFLAGS}"
    VS_LIBS="${VS_LIBS} ${SDL_LIBS}"

    dnl Check for joystick support in SDL
    saved_LIBS="$LIBS"
    LIBS="$saved_LIBS $VS_LIBS"

    AC_CHECK_FUNCS( SDL_JoystickOpen, 
                    have_SDL_joystick=yes, have_SDL_joystick=no )

    if test "x$have_SDL_joystick" = "xno" ; then
        echo "*** This version of SDL doesn't have joystick support."
        echo "*** Configuring without joystick support."
    fi

AC_ARG_ENABLE(sdl-windowing, AC_HELP_STRING([--disable-sdl-windowing], [Disable SDL's window management options]), sdl_windowing=$enableval)
	if test "x$sdl_windowing" != "xno" ; then
		VS_CPPFLAGS="${VS_CPPFLAGS} -DSDL_WINDOWING=1" 
		echo "Using SDL Windowing System"
	else
		echo "Using GLUT Windowing System"
	fi
dnl Check for SDL_mixer
    AC_CHECK_LIB( SDL_mixer, Mix_OpenAudio, 
                  have_SDL_mixer=yes, have_SDL_mixer=no )

    if test "x$have_SDL_mixer" = "xyes" ; then 
        AC_DEFINE(HAVE_SDL_MIXER,1,[Can we use the SDL mixer])
	SDL_MIXER_LIBS="-lSDL_mixer"
    else
        echo "*** SDL_mixer not found.  Configuring without audio support."
    fi
    AC_SUBST(SDL_MIXER_LIBS)

    LIBS="$saved_LIBS"
else
    echo "*** SDL not found.  Configuring without audio or joystick support."
fi
else
    echo "*** SDL disabled. Configuring without audio or joystick support."
fi

dnl --------------------------------------------------------------------------
dnl Check for GL library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(gl-libs, AC_HELP_STRING([--with-gl-libs=DIR], [GL/MesaGL library location]))
AC_ARG_WITH(gl-lib-name, AC_HELP_STRING([--with-gl-lib-name=NAME], [GL library name]))

if test "x$with_gl_libs" = "x" ; then
    GL_LDOPTS=""
else
    GL_LDOPTS="-L$with_gl_libs"
fi

saved_LIBS="$LIBS"

AC_DEFUN( CHECK_FOR_GL_LIB, [
    AC_MSG_CHECKING([for $GL_LIB_NAME library])
    LIBS="$saved_LIBS $VS_LIBS $GL_LDOPTS -l$GL_LIB_NAME"
    AC_TRY_LINK( , , have_GL=yes, have_GL=no)
    AC_MSG_RESULT([${have_GL}])

    if test "x$have_GL" = "xyes" ; then
	VS_LIBS="$VS_LIBS $GL_LDOPTS -l$GL_LIB_NAME"

    else
	dnl Try with ${PTHREAD_LIBS}

	AC_MSG_CHECKING([for $GL_LIB_NAME library (with pthreads)])
	LIBS="$saved_LIBS $VS_LIBS $GL_LDOPTS -l$GL_LIB_NAME ${PTHREAD_LIBS}"
	AC_TRY_LINK( , , have_GL=yes, have_GL=no)
	AC_MSG_RESULT([$have_GL])

	if test "x$have_GL" = "xyes" ; then
	    VS_LIBS="$VS_LIBS $GL_LDOPTS -l$GL_LIB_NAME ${PTHREAD_LIBS}"
	fi
    fi
])

AC_DEFUN( FIND_GL_LIB, [
    if test "x$with_gl_lib_name" = "x" ; then
        GL_LIB_NAME="GL"
    else
        GL_LIB_NAME="$with_gl_lib_name"
    fi

    CHECK_FOR_GL_LIB

    if test "x$have_GL" = "xno" -a "x$with_gl_lib_name" = "x" ; then
        GL_LIB_LIST=`grep -v -E "^$GL_LIB_NAME\$" <<EOF
GL
MesaGL
opengl32
EOF
`

        for GL_LIB_NAME in $GL_LIB_LIST ; do
            CHECK_FOR_GL_LIB

            if test "x$have_GL" = "xyes" ; then
                break;
            fi
        done
    fi
])

FIND_GL_LIB

if test "x$have_GL" = "xno" -a "x$GL_LDOPTS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL libraries installed in the standard"
    echo "*** location (/usr/lib).  I'll check in /usr/X11R6/lib, since"
    echo "*** many distributions (incorrectly) put OpenGL libs there."
    GL_LDOPTS="-L/usr/X11R6/lib"
    FIND_GL_LIB
fi

if test "x$have_GL" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL library])
fi

if test "x${is_win32}" = "xno" -a x$is_macosx = xno; then
    dnl Make sure GL lib is up-to-date
    AC_CHECK_FUNCS( glXGetProcAddressARB, gl_up_to_date=yes, gl_up_to_date=no )

    if test "x$gl_up_to_date" = "xno" ; then
	AC_MSG_ERROR([Your copy of OpenGL is out of date. If using Mesa, make sure you have version >= 3.2.])
    fi
fi

LIBS="$saved_LIBS"




dnl --------------------------------------------------------------------------
dnl Check for GLU library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(glu-libs, AC_HELP_STRING([--with-glu-libs=DIR], [GLU/MesaGLU library location]))
AC_ARG_WITH(glu-lib-name, AC_HELP_STRING([--with-glu-lib-name=NAME], [GLU library name]))

if test "x$with_glu_libs" = "x" ; then
    GLU_LDOPTS=""
else
    GLU_LDOPTS="-L$with_glu_libs"
fi

saved_LIBS="$LIBS"

AC_DEFUN( CHECK_FOR_GLU_LIB, [
    AC_MSG_CHECKING([for $GLU_LIB_NAME library])
    LIBS="$saved_LIBS $VS_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME"
    AC_TRY_LINK( , , have_GLU=yes, have_GLU=no)
    AC_MSG_RESULT([$have_GLU])

    if test "x$have_GLU" = "xyes" ; then
	VS_LIBS="$VS_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME"
    else
	dnl Try with ${PTHREAD_LIBS}

	AC_MSG_CHECKING([for $GLU_LIB_NAME library (with pthreads)])
	LIBS="$saved_LIBS $VS_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME"
	AC_TRY_LINK( , , have_GLU=yes, have_GLU=no)
	AC_MSG_RESULT([$have_GLU])

	if test "x$have_GLU" = "xyes" ; then
	    VS_LIBS="$VS_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME ${PTHREAD_LIBS}"
	fi
    fi
])

AC_DEFUN( FIND_GLU_LIB, [
    if test "x$with_glu_lib_name" = "x" ; then
        GLU_LIB_NAME="GLU"
    else
        GLU_LIB_NAME="$with_glu_lib_name"
    fi

    CHECK_FOR_GLU_LIB

    if test "x$have_GLU" = "xno" -a "x$with_glu_lib_name" = "x" ; then
        GLU_LIB_LIST=`grep -v -E "^$GLU_LIB_NAME\$" <<EOF
GLU
MesaGLU
openglu32
EOF
`

        for GLU_LIB_NAME in $GLU_LIB_LIST ; do
            CHECK_FOR_GLU_LIB

            if test "x$have_GLU" = "xyes" ; then
                break;
            fi
        done
    fi
])

FIND_GLU_LIB

if test "x$have_GLU" = "xno" -a "x$GLU_LDOPTS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGLU libraries installed in the standard"
    echo "*** location (/usr/lib).  I'll check in /usr/X11R6/lib, since"
    echo "*** many distributions (incorrectly) put OpenGLU libs there."
    GLU_LDOPTS="-L/usr/X11R6/lib"
    FIND_GLU_LIB
fi

if test "x$have_GLU" = "xno" ; then
    AC_MSG_ERROR([Cannot find GLU library])
fi

LIBS="$saved_LIBS"





dnl --------------------------------------------------------------------------
dnl Check for OpenGL headers
dnl --------------------------------------------------------------------------

AC_ARG_WITH(gl-inc, AC_HELP_STRING([--with-gl-inc=DIR], [OpenGL header file location]))

if test "x$with_gl_inc" = "x" ; then
    GL_CPPFLAGS=""
else 
    GL_CPPFLAGS="$GL_CPPFLAGS -I$with_gl_inc"
fi

dnl check for gl.h
saved_CPPFLAGS="$CPPFLAGS"
AC_DEFUN( CHECK_FOR_GL_H, [
    CPPFLAGS="$saved_CPPFLAGS $GL_CPPFLAGS $VS_CPPFLAGS"

    AC_MSG_CHECKING([for GL/gl.h])
    if test "x$is_macosx" = "xyes" ; then
        have_gl_h=yes
    else
        AC_TRY_CPP( [ #include <GL/gl.h> ], have_gl_h=yes, have_gl_h=no )
    fi
    AC_MSG_RESULT([$have_gl_h])
])

CHECK_FOR_GL_H

if test "x$have_gl_h" = "xno" -a "x$GL_CPPFLAGS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL headers installed in the standard"
    echo "*** location (/usr/include).  I'll check in /usr/X11R6/include, since"
    echo "*** many distributions (incorrectly) put OpenGL headers there."
    GL_CPPFLAGS="-I/usr/X11R6/include"
    CHECK_FOR_GL_H
fi

if test "x$have_gl_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL/gl.h])
fi

dnl Check for glext.h
if test "x$is_macosx" = "xyes" ; then
    have_glext_h=yes
else
    AC_CHECK_HEADERS(GL/glext.h, have_glext_h=yes, have_glext_h=no )
fi

if test "x$have_glext_h" = "xno" ; then
    AC_MSG_ERROR([
*****************************************************************
You are missing the file glext.h.
You can get a copy at
http://oss.sgi.com/projects/ogl-sample/ABI/glext.h
Place it in the directory /usr/include/GL.
*****************************************************************])
fi

dnl Check that glext.h version is recent enough
AC_MSG_CHECKING([whether glext.h is recent enough]);
if test "x$is_macosx" = "xno" ; then
AC_EGREP_CPP(yes,
[
#include <GL/gl.h>
#include <GL/glext.h>
#if defined(GL_GLEXT_VERSION) && GL_GLEXT_VERSION >= 6
 yes
#endif
], is_glext_h_recent=yes, is_glext_h_recent=no )
else
    is_glext_h_recent=yes
fi

AC_MSG_RESULT([$is_glext_h_recent])

if test "x$is_glext_h_recent" = "xno" ; then
    AC_MSG_ERROR([
*****************************************************************
Your copy of glext.h is out of date.
You can get a copy of the latest version at
http://oss.sgi.com/projects/ogl-sample/ABI/glext.h
Place it in the directory /usr/include/GL.
*****************************************************************])
fi

CPPFLAGS="$saved_CPPFLAGS"
VS_CPPFLAGS="${VS_CPPFLAGS} $GL_CPPFLAGS"

dnl --------------------------------------------------------------------------
dnl Check for glut library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(glut-libs, AC_HELP_STRING([--with-glut-libs=DIR], [Location of GLUT library]))

if test "x$with_glut_libs" = "x" ; then
    GLUT_LDOPTS="$GLUT_LDOPTS"
else
    GLUT_LDOPTS="-L$with_glut_libs"
fi

AC_DEFUN( CHECK_FOR_GLUT_LIB, [
    AC_MSG_CHECKING([for $GLUT_LIB_NAME library])
    if test "x$is_macosx" = "xyes" ; then
        LIBS="$saved_LIBS $VS_LIBS $GLUT_LDOPTS -framework GLUT"
    else
	saved_LDFLAGS=$LDFLAGS
	LDFLAGS="-L/usr/X11R6/lib $saved_LDFLAGS"
        LIBS="$saved_LIBS $VS_LIBS $GLUT_LDOPTS -l$GLUT_LIB_NAME -lXi -lXmu"
    fi
    AC_TRY_LINK( , , have_glut_lib=yes, have_glut_lib=no )
    AC_MSG_RESULT([$have_glut_lib])
])
LDFLAGS="$saved_LDFLAGS"
saved_LIBS="$LIBS"

GLUT_LIB_LIST="glut32 glut"

for GLUT_LIB_NAME in $GLUT_LIB_LIST ; do
    CHECK_FOR_GLUT_LIB

    if test "x$have_glut_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_glut_lib" = "xno" ; then
    AC_MSG_ERROR([GLUT library not found or too old version. 3.7 (beta) or later required.])
fi

LIBS="$saved_LIBS -lXi -lXmu"
if test "x$is_macosx" = "xyes" ; then
    VS_LIBS="$VS_LIBS $GLUT_LDOPTS -framework GLUT"
else
    VS_LIBS="$VS_LIBS $GLUT_LDOPTS -l$GLUT_LIB_NAME  -lXi -lXmu"
fi


dnl --------------------------------------------------------------------------
dnl Check for glut.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(glut-inc, AC_HELP_STRING([--with-glut-inc=DIR], [Specify GLUT header file location]))

if test "x$with_glut_inc" = "x" ; then
    GLUT_CPPFLAGS="$GLUT_CPPFLAGS"
else
    GLUT_CPPFLAGS="-I$with_glut_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$saved_CPPFLAGS $VS_CPPFLAGS $GLUT_CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    have_glut_h=yes
else
    AC_CHECK_HEADER([GL/glut.h], have_glut_h=yes, have_glut_h=no )
fi
if test "x$have_glut_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL/glut.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
VS_CPPFLAGS="${VS_CPPFLAGS} $GLUT_CPPFLAGS"


dnl --------------------------------------------------------------------------
dnl Check for expat library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(expat-libs, AC_HELP_STRING([--with-expat-libs=DIR], [Location of expat library]))

if test "x$with_expat_libs" = "x" ; then
    EXPAT_LDOPTS=""
else
    EXPAT_LDOPTS="-L$with_expat_libs"
fi

AC_DEFUN( CHECK_FOR_EXPAT_LIB, [
    AC_MSG_CHECKING([for $EXPAT_LIB_NAME library])
    LIBS="$EXPAT_LDOPTS -l$EXPAT_LIB_NAME"
    AC_TRY_LINK( , , have_expat_lib=yes, have_expat_lib=no )
    AC_MSG_RESULT([$have_expat_lib])
]) 

saved_LIBS="$LIBS"

EXPAT_LIB_LIST="expat"

for EXPAT_LIB_NAME in $EXPAT_LIB_LIST ; do
    CHECK_FOR_EXPAT_LIB

    if test "x$have_expat_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_expat_lib" = "xno" ; then
    AC_MSG_ERROR([Expat library not found])
fi

LIBS="$saved_LIBS"
VS_LIBS="$VS_LIBS $EXPAT_LDOPTS -l$EXPAT_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for expat.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(expat-inc, AC_HELP_STRING([--with-expat-inc=DIR], [Specify expat header file location]))

if test "x$with_expat_inc" = "x" ; then
    EXPAT_CPPFLAGS=""
else
    EXPAT_CPPFLAGS="-I$with_expat_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $EXPAT_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $VS_CPPFLAGS $EXPAT_CPPFLAGS "
fi
AC_CHECK_HEADER([expat.h], have_expat_h=yes, have_expat_h=no )

if test "x$have_expat_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find expat.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
VS_CPPFLAGS="${VS_CPPFLAGS} ${EXPAT_CPPFLAGS}"



dnl --------------------------------------------------------------------------
dnl Check for png library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(png-libs, AC_HELP_STRING([--with-png-libs=DIR], [Location of png library]))

if test "x$with_png_libs" = "x" ; then
    PNG_LDOPTS=""
else
    PNG_LDOPTS="-L$with_png_libs"
fi

AC_DEFUN( CHECK_FOR_PNG_LIB, [
    AC_MSG_CHECKING([for $PNG_LIB_NAME library])
    LIBS="$PNG_LDOPTS -l$PNG_LIB_NAME"
    AC_TRY_LINK( , , have_png_lib=yes, have_png_lib=no )
    AC_MSG_RESULT([$have_png_lib])
]) 

saved_LIBS="$LIBS"

PNG_LIB_LIST="png png12"

for PNG_LIB_NAME in $PNG_LIB_LIST ; do
    CHECK_FOR_PNG_LIB

    if test "x$have_png_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_png_lib" = "xno" ; then
     PNG_LIB_NAME="png -lz -lm"
     CHECK_FOR_PNG_LIB
     if test "x$have_png_lib" = "xno" ; then
       AC_MSG_ERROR([Png library not found])
     fi
fi

LIBS="$saved_LIBS"
VS_LIBS="$VS_LIBS $PNG_LDOPTS -l$PNG_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for png.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(png-inc, AC_HELP_STRING([--with-png-inc=DIR], [Specify png header file location]))

if test "x$with_png_inc" = "x" ; then
    PNG_CPPFLAGS=""
else
    PNG_CPPFLAGS="-I$with_png_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $PNG_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $VS_CPPFLAGS $PNG_CPPFLAGS "
fi
AC_CHECK_HEADER([png.h], have_png_h=yes, have_png_h=no )

if test "x$have_png_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find png.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
VS_CPPFLAGS="${VS_CPPFLAGS} ${PNG_CPPFLAGS}"



dnl --------------------------------------------------------------------------
dnl Check for jpeg library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(jpeg-libs, AC_HELP_STRING([--with-jpeg-libs=DIR], [Location of jpeg library]))

if test "x$with_jpeg_libs" = "x" ; then
    JPEG_LDOPTS=""
else
    JPEG_LDOPTS="-L$with_jpeg_libs"
fi

AC_DEFUN( CHECK_FOR_JPEG_LIB, [
    AC_MSG_CHECKING([for $JPEG_LIB_NAME library])
    LIBS="$JPEG_LDOPTS -l$JPEG_LIB_NAME"
    AC_TRY_LINK( , , have_jpeg_lib=yes, have_jpeg_lib=no )
    AC_MSG_RESULT([$have_jpeg_lib])
]) 

saved_LIBS="$LIBS"

JPEG_LIB_LIST="jpeg"

for JPEG_LIB_NAME in $JPEG_LIB_LIST ; do
    CHECK_FOR_JPEG_LIB

    if test "x$have_jpeg_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_jpeg_lib" = "xno" ; then
    AC_MSG_ERROR([Jpeg library not found])
fi

LIBS="$saved_LIBS"
VS_LIBS="$VS_LIBS $JPEG_LDOPTS -l$JPEG_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for jpeg.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(jpeg-inc, AC_HELP_STRING([--with-jpeg-inc=DIR], [Specify jpeg header file location]))

if test "x$with_jpeg_inc" = "x" ; then
    JPEG_CPPFLAGS=""
else
    JPEG_CPPFLAGS="-I$with_jpeg_inc -DJPEG_SUPPORT"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $JPEG_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $VS_CPPFLAGS $JPEG_CPPFLAGS "
fi
AC_CHECK_HEADER([jpeglib.h], have_jpeg_h=yes, have_jpeg_h=no )
if test "x$have_jpeg_h" = "xno" ; then
    AC_MSG_WARN([Cannot find jpeg.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
VS_CPPFLAGS="${VS_CPPFLAGS} ${JPEG_CPPFLAGS}"

dnl --------------------------------------------------------------------------
dnl Check for openal library
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(sound, AC_HELP_STRING([--disable-sound], [Disable allsound support]),sdl_sound=$enableval)

AC_ARG_WITH(openal-libs, AC_HELP_STRING([--with-openal-libs=DIR], [Location of openal library]))
if test "x$sdl_sound" != "xno" ; then
    if test "x$with_openal_libs" = "x" ; then
        OPENAL_LDOPTS=""
    else
        OPENAL_LDOPTS="-L$with_openal_libs"
    fi

    AC_DEFUN( CHECK_FOR_OPENAL_LIB, [
        AC_MSG_CHECKING([for $OPENAL_LIB_NAME library])
	LIBS="$MACORPCLIBS"
        AC_TRY_LINK( , , have_openal_lib=yes, have_openal_lib=no )
        AC_MSG_RESULT([$have_openal_lib])
    ]) 

    saved_LIBS="$RRLIBS"
    
    OPENAL_LIB_LIST="openal"
    
    for OPENAL_LIB_NAME in $OPENAL_LIB_LIST ; do

    if test "x$is_macosx" = "xyes" ; then
      MACORPCLIBS="$OPENAL_LDOPTS -framework OpenAL"
    else
      MACORPCLIBS="$OPENAL_LDOPTS -l$OPENAL_LIB_NAME"
    fi
        CHECK_FOR_OPENAL_LIB
    
        if test "x$have_openal_lib" = "xyes" ; then
            LIBS="$saved_LIBS"
    	    VS_LIBS="$VS_LIBS $MACORPCLIBS"
			if test "x${is_win32}" = "xyes" ; then
    	    VS_LIBS="$VS_LIBS -lwinmm"
			fi
            break;
        else
	    LIBS=""
	    saved_LIBS=""
        fi
    done

fi


dnl --------------------------------------------------------------------------
dnl Check for OpenAL headers
dnl --------------------------------------------------------------------------

AC_ARG_WITH(al-inc, AC_HELP_STRING([--with-al-inc=DIR], [OpenAL header file location]))

if test "x$with_al_inc" = "x" ; then
    AL_CPPFLAGS=""
else 
    AL_CPPFLAGS="-I$with_al_inc"
fi

dnl check for al.h
saved_CPPFLAGS="$CPPFLAGS"

AC_DEFUN( CHECK_FOR_AL_H, [
    CPPFLAGS="$saved_CPPFLAGS $AL_CPPFLAGS"
    if test "x$is_macosx" = "xno" ; then
        CPPFLAGS="$VS_CPPFLAGS $AL_CPPFLAGS"
    fi

    AC_MSG_CHECKING([for AL/al.h])
    AC_TRY_CPP( [ #include <AL/al.h> ], have_al_h=yes, have_al_h=no )
    AC_MSG_RESULT([$have_al_h])
    AC_MSG_CHECKING([for al.h])
    AC_TRY_CPP( [ #include <al.h> ], have_al_h=yes, )
    AC_MSG_RESULT([$have_al_h])
])

CHECK_FOR_AL_H

if test "x$have_al_h" = "xno" -a "x$AL_CPPFLAGS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenAL headers installed in the standard"
    echo "*** location (/usr/include).  I'll check in /usr/local/include, since"
    echo "*** many distributions put OpenAL headers there."
    AL_CPPFLAGS="-I/usr/local/include"
    CHECK_FOR_AL_H
fi
if test "x$have_openal_lib" = "xno" ; then
    echo "Cannot find openal library"
    echo "Error::Configuring without OpenAL support!"
else
    if test "x$have_al_h" = "xno" ; then
        echo "Cannot find AL/al.h"
        echo "Error::Configuring without OpenAL support!"
    else
      dnl Check for alext.h 
      AC_CHECK_HEADERS(AL/alext.h, have_alext_h=yes, have_alext_h=no )

      if test "x$sdl_sound" != "xno" ; then
        echo "Configuring with OpenAL support!"
        VS_CPPFLAGS="${VS_CPPFLAGS} -DHAVE_AL=1" 
      else
        echo "Disabling OpenAL on user request"
      fi   
    fi
fi


CPPFLAGS="$saved_CPPFLAGS" 
VS_CPPFLAGS="${VS_CPPFLAGS} ${AL_CPPFLAGS}"



dnl --------------------------------------------------------------------------
dnl Check for crypto++ library
dnl --------------------------------------------------------------------------

CRYPTO="0"
dnl AC_ARG_ENABLE(crypto, AC_HELP_STRING([--enable-crypto], [Enable crypto++ library support]), [CRYPTO="1"])

	AC_ARG_ENABLE(	crypto,
				AC_HELP_STRING([--enable-crypto=VERSION],
				[Enable crypto++ library support (VERSION=51 (5.1, default))]),
				[
   					CRYPTO="1"
					CRYPTO_VERSION="$enableval"
					if test "x$enableval" = "xyes" ; then
							CRYPTO_VERSION="51"
					fi
				],
				[])

if test "$CRYPTO" = "1" ; then
	dnl AC_DEFUN( CHECK_FOR_CRYPTOLIB_H, [
	dnl	CPPFLAGS="$CPPFLAGS $CRYPTO_FLAGS"
	dnl    dnl AC_MSG_CHECKING([for crypto++/cryptlib.h])
    dnl    AC_CHECK_HEADERS(crypto++/cryptlib.h, have_crypto_h=yes, have_crypto_h=no )
	    dnl AC_TRY_CPP( [ #include <crypto++/cryptlib.h> ], have_crypto_h=yes, have_crypto_h=no )
	dnl    AC_MSG_RESULT([$have_crypto_h])
	dnl ])

	dnl CHECK_FOR_CRYPTOLIB_H
	dnl if test "x$have_crypto_h" = "xyes" ; then
	dnl	VS_CPPFLAGS="$VS_CPPFLAGS -DCRPYTO"
	dnl else
	dnl	echo "checking in /usr/local/include..."
	dnl	CRYPTO_FLAGS="-I/usr/local/include"
	dnl	CHECK_FOR_CRYPTOLIB_H
	dnl	if test "x$have_crypto_h" = "xyes" ; then
	dnl		VS_CPPFLAGS="$VS_CPPFLAGS -DCRPYTO"
	dnl	else
	dnl		echo "No cryptolib support"
	dnl	fi
	dnl fi

    AC_DEFUN( CHECK_FOR_CRYPTO_LIB, [
        AC_MSG_CHECKING([for crypto++ library with $CRYPTO_LIB])
		VS_LIBS="$VS_LIBS $CRYPTO_LIB"
		LIBS="$VS_LIBS"
        AC_TRY_LINK( , , have_crypto_lib=yes, have_crypto_lib=no )
        AC_MSG_RESULT([$have_crypto_lib])
    ]) 
	saved_VSLIBS="$VS_LIBS"
	CRYPTO_LIB="-lcrypto++"
	CHECK_FOR_CRYPTO_LIB
	if test "x$have_crypto_lib" = "xno" ; then
		CRYPTO_LIB="-L/usr/local/lib -lcrypto++"
		CHECK_FOR_CRYPTO_LIB
		dnl Test for debian
		if test "x$have_crypto_lib" = "xno" ; then
			VS_LIBS="$saved_VSLIBS"
			CRYPTO_LIB="-lcrypto++5.1"
			CHECK_FOR_CRYPTO_LIB
			if test "x$have_crypto_lib" = "xno" ; then
				VS_LIBS="$saved_VSLIBS"
				CRYPTO_LIB="-lcryptopp"
				CHECK_FOR_CRYPTO_LIB
				if test "x$have_crypto_lib" = "xno" ; then
					VS_LIBS="$saved_VSLIBS"
					CRYPTO_LIB="-L/usr/local/lib -lcryptopp"
					CHECK_FOR_CRYPTO_LIB
					if test "x$have_crypto_lib" = "xno" ; then
						VS_LIBS="$saved_VSLIBS"
					fi
				fi
			fi
		fi
	fi
	LIBS="$VSLIBS"
	if test "x$have_crypto_lib" = "xyes" ; then
		VS_CPPFLAGS="$VS_CPPFLAGS -DCRYPTO=$CRYPTO_VERSION"
		CPPFLAGS="$CPPFLAGS -I/usr/local/include"
		echo "Crypto++ library support enabled"
	else
		echo "No Crypto++ support"
	fi
else
	echo "No Crypto++ support"
fi

dnl --------------------------------------------------------------------------
dnl Check for network communication system
dnl --------------------------------------------------------------------------

TESTNETCOMM="0"
TESTNETCOMM_NOSOUND="1"
TESTNETCOMM_WEBCAM="0"
TESTNETCOMM_JVOIP="0"
TESTNETCOMM_PORTAUDIO="0"

	dnl NOTE : CLIENT WITH JVOIP SUPPORT WILL ONLY HEAR OTHER JVOIP CLIENTS
	dnl        AND IT GOES THE SAME FOR PORTAUDIO
	AC_ARG_ENABLE(	netcomm,
				AC_HELP_STRING([--enable-netcomm=TYPE],
				[Enable hazardous network communications (TYPE=nosound (default), jvoip, portaudio)]),
				[
    				AC_DEFINE(NETCOMM,1,[enable hazardous network communications (Webcam and VoIP)])
					case "$enableval" in
						"n" | "none" | "nosound")
							TESTNETCOMM="1"
					;;
						"j" | "jvoip")
							TESTNETCOMM_NOSOUND="0"
							TESTNETCOMM_JVOIP="1"
							TESTNETCOMM="1"
							echo "Trying to enable JVoIP support... "
					;;
						"pa" | "portaudio")
							TESTNETCOMM_NOSOUND="0"
							TESTNETCOMM_PORTAUDIO="1"
							TESTNETCOMM="1"
							echo "Trying to enable PortAudio support... "
					;;
					esac
				],
				[])

if test "$TESTNETCOMM" = "1" ; then
	dnl check for oss headers under Linux

	if test "$TESTNETCOMM_NOSOUND" = "0"; then
		AC_DEFUN( CHECK_FOR_OSS_H, [
		    AC_MSG_CHECKING([for sys/soundcard.h])
		    AC_TRY_CPP( [ #include <sys/soundcard.h> ], have_oss_h=yes, have_oss_h=no )
		    AC_MSG_RESULT([$have_oss_h])
		])

		AC_DEFUN( CHECK_FOR_JVOIP_H, [
		    AC_MSG_CHECKING([for jvoiplib/jvoipsession.h])
		    AC_TRY_CPP( [ #include <jvoiplib/jvoipsession.h> ], have_jvoip_h=yes, have_jvoip_h=no )
		    AC_MSG_RESULT([$have_jvoip_h])
		])

		AC_DEFUN( CHECK_FOR_JTHREAD_H, [
		    AC_MSG_CHECKING([for jthread/jthread.h])
		    AC_TRY_CPP( [ #include <jthread/jthread.h> ], have_jthread_h=yes, have_jthread_h=no )
		    AC_MSG_RESULT([$have_jthread_h])
		])

		AC_DEFUN( CHECK_FOR_JRTP_H, [
		    AC_MSG_CHECKING([for jrtp/rtpsession.h])
		    AC_TRY_CPP( [ #include <jrtp/rtpsession.h> ], have_jrtp_h=yes, have_jrtp_h=no )
		    AC_MSG_RESULT([$have_jrtp_h])
		])

		AC_DEFUN( CHECK_FOR_COREAUDIO_H, [
		    AC_MSG_CHECKING([for CoreAudio/CoreAudio.h])
		    AC_TRY_CPP( [ #include <CoreAudio/CoreAudio.h> ], have_core_audio_h=yes, have_core_audio_h=no )
		    AC_MSG_RESULT([$have_core_audio_h])
		])

		if test "$LINUX" = "1" ; then
			CHECK_FOR_OSS_H
			if test "x$have_oss_h" = "xno" ; then
				TESTNETCOMM_JVOIP="0"
				TESTNETCOMM_PORTAUDIO="0"
			fi
		fi

		if test "x$is_macosx" = "xyes" ; then
			if test "$TESTNETCOMM_JVOIP" = "1" ; then
				CHECK_FOR_COREAUDIO_H
				TESTNETCOMM_JVOIP="0"
				echo "JVoIP lib does not support MacOS X yet"
			else
				if test "x$have_core_audio_h" = "xno" ; then
					TESTNETCOMM_PORTAUDIO="0"
				fi
			fi
		fi

		saved_CPPFLAGS="$CPPFLAGS"
		dnl Add the CFLAGS that correspond to sound choice
		if test "$TESTNETCOMM_JVOIP" = "1" ; then
		dnl THIS DOESN'T WORK BECAUSE JVOIP HEADERS INCLUDE C++ IOSTREAM AND STRING HEADERS
		dnl	JLIBS_FLAGS="-I/usr/include -I/usr/local/include -I/usr/local/include/jrtplib -I/usr/local/include/jthread -I/usr/local/include/jvoiplib"
		dnl	CPPFLAGS="$saved_CPPFLAGS $JLIBS_FLAGS"
		dnl	CHECK_FOR_JVOIP_H
		dnl	if test "x$have_jvoip_h" = "xno" ; then
		dnl		TESTNETCOMM_JVOIP=0
		dnl		echo "JVoIP lib headers not found : disabling JVoIP support"
		dnl	else
		dnl		CHECK_FOR_JTHREAD_H
		dnl		if test "x$have_jthread_h" = "xno" ; then
		dnl			TESTNETCOMM_JVOIP=0
		dnl			echo "JThread lib headers not found : disabling JVoIP support"
		dnl		else
		dnl			CHECK_FOR_JRTP_H
		dnl			if test "x$have_jrtp_h" = "xno" ; then
		dnl				TESTNETCOMM_JVOIP=0
		dnl				echo "JRtp lib headers not found : disabling JVoIP support"
		dnl			else
					  	VS_CPPFLAGS="$VS_CPPFLAGS -DNETCOMM_JVOIP"
						VS_LIBS="$VS_LIBS -L/usr/local/lib -ljvoip -ljrtp -ljthread"
					   	AC_DEFINE(NETCOMM_JVOIP,1,[enable JVoIP library for sound support with NETCOMM])
						echo "VoIP support enabled."
		dnl			fi
		dnl		fi
		dnl	fi
		else
			if test "$TESTNETCOMM_PORTAUDIO" = "1" ; then
				VS_LIBS="$VS_LIBS -L/usr/local/lib -lportaudio"
	   			AC_DEFINE(NETCOMM_PORTAUDIO,1,[enable PortAudio library for sound support with NETCOMM])
				echo "PortAudio support enabled."
			else
				TESTNETCOMM_PORTAUDIO="0"
				echo "PortAudio support disabled."
			fi
		fi
		CPPFLAGS="$saved_CPPFLAGS"
	else
		echo "No sound support for networking communications"
		TESTNETCOMM_JVOIP="0"
		TESTNETCOMM_PORTAUDIO="0"
	fi

	dnl Check for video for linux headers under linux
	AC_DEFUN( CHECK_FOR_VFL_H, [
	    AC_MSG_CHECKING([for linux/videodev.h])
	    AC_TRY_CPP( [ #include <linux/videodev.h> ], have_vfl_h=yes, have_vfl_h=no )
	    AC_MSG_RESULT([$have_vfl_h])
	])

	echo "Trying to enable webcam support... "

	dnl Test to check VFL headers
	if test "$LINUX" = "1" ; then
		CHECK_FOR_VFL_H
		if test "x$have_vfl_h" = "xyes" ; then
			echo "Webcam support enabled."
			TESTNETCOMM_WEBCAM="1"
    		AC_DEFINE(NETCOMM_WEBCAM,1,[enable video with NETCOMM])
		else
			echo "*** Webcam support disabled."
		fi
	fi

	dnl Check for QuickTime headers under MacOS X
	dnl saved_CPPFLAGS="$CPPFLAGS"
	AC_DEFUN( CHECK_FOR_QT_H, [
	    AC_MSG_CHECKING([for QuickTimeComponents.h])
	    AC_TRY_CPP( [ #include <QuickTimeComponents.h> ], have_qt_h=yes, have_qt_h=no )
	    AC_MSG_RESULT([$have_qt_h])
	])

	if test "$is_macosx" = "yes" ; then
		CPPFLAGS="$CPPFLAGS -I/System/Library/Frameworks/QuickTime.framework/Versions/A/Headers"
		CHECK_FOR_QT_H
		if test "x$have_qt_h" = "xyes" ; then
			TESTNETCOMM_WEBCAM="1"
    		AC_DEFINE(NETCOMM_WEBCAM,1,[enable video with NETCOMM])
   			LIBS="$LIBS -framework QuickTime -framework Carbon"
			echo "Webcam support enabled."
		else
			echo "*** Webcam support disabled."
		fi

	fi
fi

AM_CONDITIONAL(NETCOMM, test "$TESTNETCOMM" = "1")
AM_CONDITIONAL(NETCOMM_NOSOUND, test "$TESTNETCOMM_NOSOUND" = "1")
AM_CONDITIONAL(NETCOMM_NOWEBCAM, test "$TESTNETCOMM_NOWEBCAM" = "1")
AM_CONDITIONAL(NETCOMM_JVOIP, test "$TESTNETCOMM_JVOIP" = "1")
AM_CONDITIONAL(NETCOMM_PORTAUDIO, test "$TESTNETCOMM_PORTAUDIO" = "1")


dnl --------------------------------------------------------------------------

dnl Check for win32 winsock 2 support
dnl --------------------------------------------------------------------------
if test "$WIN32" = "1" ; then
AC_ARG_ENABLE(netcomm, AC_HELP_STRING([--enable-winsock2], [Enable winsock2 support instead of winsock1 under win32]), [VS_CPPFLAGS="${VS_CPPFLAGS} -D_WIN32_WINNT=0x0400"; echo "Using winsock 2 support"])
fi

dnl --------------------------------------------------------------------------
dnl Other options
dnl --------------------------------------------------------------------------

dnl Turn use of stencil buffer on/off
AC_ARG_ENABLE(stencil-buffer, AC_HELP_STRING([--enable-stencil-buffer], [Use if your hardware has a stencil buffer]),VS_CPPFLAGS="${VS_CPPFLAGS} -DUSE_STENCIL_BUFFER=1")

AC_ARG_ENABLE(nvidia-cg, AC_HELP_STRING([--enable-nvidia-cg], 
	[Use if you have the NVidia SDK and CG compiler or compatible to get shader support (very experimental)]))
if test "x$nvidia-cg" = "xyes"; then
saved_LIBS="$LIBS"
LIBS="-lCg -lCgGL"
AC_TRY_LINK( , , cg_enable=yes, cg_enable=no)
LIBS="${saved_LIBS}"

if test "x$cg_enable" = "xyes"; then
CG_CPPFLAGS="-DCG_SUPPORT=1" 
CG_LIBS="-lCg -lCgGL"
fi

fi


dnl Specify data directory
AC_ARG_WITH(data-dir, AC_HELP_STRING([--with-data-dir=PATH], [Default vegastrike data directory]),VS_CPPFLAGS="${VS_CPPFLAGS} -DDATA_DIR=\\\"$withval\\\"")


AC_SUBST(VS_CPPFLAGS)
AC_SUBST(VS_CXXFLAGS)
AC_SUBST(VS_LIBS)
AC_SUBST(PYTHON_CPPFLAGS)
AC_SUBST(CG_CPPFLAGS)
AC_SUBST(CG_LIBS)

BOOST_CPPFLAGS="-DUSE_BOOST_128=1"' -I$(top_srcdir)/src/boost'
BOOST_LIBS="../src/boost/libpython_boost.a"
TESTUSEBOOST131="1"
TESTUSEBOOST128="0"
AC_ARG_ENABLE(boost-128, AC_HELP_STRING([--enable-boost-128], [Use if your compiler has trouble with boost-131 (such as gcc 2.9x)]),TESTUSEBOOST131="0")

if test "$TESTUSEBOOST131" = "1" ; then
   BOOST_CPPFLAGS="-DUSE_BOOST_131=1 "'-I$(top_srcdir)/src/boost129'
   BOOST_LIBS="../src/boost129/libpython_boost.a"
fi

if test "$TESTUSEBOOST131" = "0" ; then
TESTUSEBOOST128="1"
fi

AC_SUBST([BOOST_LIBS])
AC_SUBST([BOOST_CPPFLAGS])
AM_CONDITIONAL(USEBOOST128, test "$TESTUSEBOOST128" = "1")
AM_CONDITIONAL(USEBOOST131, test "$TESTUSEBOOST131" = "1")
AM_CONDITIONAL(WIN32, test "${WIN32}" = "1")
AM_CONDITIONAL(LINUX, test "$LINUX" = "1")
AM_CONDITIONAL(MACOSX, test "x$is_macosx" = "xyes")


dnl --------------------------------------------------------------------------
dnl Choosing networking threading approach
dnl --------------------------------------------------------------------------
AC_ARG_WITH(net-threads, AC_HELP_STRING([--with-net-threads], [TYPES are none (default) and posix]))
  case "x$net-threads" in
      "n" | "no" | "none"| "x" | *)
        use_net_thread=NONE
        AC_DEFINE(USE_NET_THREAD_NONE,1,[Use no threads])
        ;;
      "p" | "posix"|"yes")
        use_net_thread=POSIX
        AC_DEFINE(USE_NET_THREAD_POSIX,1,[Use POSIX threads])
        ;;
  esac                                  


CPPFLAGS="${CPPFLAGS} ${VS_CPPFLAGS} ${PYTHON_CPPFLAGS} ${BOOST_CPPFLAGS} ${CG_CPPFLAGS}"' -I$(top_srcdir)/src '
CXXFLAGS="${CXXFLAGS} ${VS_CXXFLAGS} ${PTHREAD_CXXFLAGS} -pipe"

LIBS="${LIBS} ${VS_LIBS} ${PYTHON_LIBS} ${PTHREAD_LIBS} ${CG_LIBS}"



AC_CONFIG_FILES(Makefile
                 common/Makefile
                 launcher/Makefile
                 mission/Makefile
                 objconv/Makefile
                 src/Makefile
                 src/aldrv/Makefile
                 src/boost/Makefile
                 src/boost129/Makefile
                 src/boost129/converter/Makefile
                 src/boost129/object/Makefile
                 src/cmd/Makefile
                 src/cmd/ai/Makefile
                 src/cmd/collide/Makefile
                 src/cmd/collide/csgeom/Makefile
                 src/cmd/script/Makefile
                 src/cmd/script/c_alike/Makefile
                 src/common/Makefile
                 src/gfx/Makefile
                 src/gfx/nav/Makefile
                 src/gldrv/Makefile
                 src/gui/Makefile
                 src/networking/Makefile
                 src/networking/lowlevel/Makefile
                 src/python/Makefile
		 objconv/mesher/Makefile
                 tools/Makefile
                 )
AC_OUTPUT()


