dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/vegastrike.h)
AM_INIT_AUTOMAKE(vegastrike, "0.3.0")
AM_CONFIG_HEADER(config.h)

dnl AC_LANG_CPLUSPLUS

dnl Check system type
AC_CANONICAL_HOST

dnl Check for compilers.  We set CFLAGS and CXXFLAGS to null if unset, so
dnl that these macros won't set them to default values that we don't want.
if test "x${CFLAGS-notset}" = "xnotset" ; then
    export CFLAGS
    CFLAGS=""
fi
AC_PROG_CC

if test "x${CXXFLAGS-notset}" = "xnotset" ; then
    export CXXFLAGS
    CXXFLAGS=""
fi
AC_PROG_CXX

dnl Check for ranlib
AC_PROG_RANLIB
#AC_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME

dnl Checks for library functions.
AC_CHECK_FUNCS(getcwd gettimeofday strdup)

dnl Check for non-standard floating point functions and headers
AC_CHECK_FUNCS(finite isnan)
AC_CHECK_FUNCS(_finite _isnan)
AC_CHECK_HEADERS(ieeefp.h)

dnl --------------------------------------------------------------------------
dnl General options
dnl --------------------------------------------------------------------------
TR_CPPFLAGS=""
TR_CFLAGS="-O2 -g -Wall -ffast-math -fexpensive-optimizations"
TR_CXXFLAGS="-O2 -g -Wall  -ffast-math -fexpensive-optimizations"
TR_LIBS=""

case "$host" in
i*86-*-*) TR_CFLAGS="$TR_CFLAGS -malign-loops=2 -malign-jumps=2 -malign-functions=2";
          TR_CXXFLAGS="$TR_CXXFLAGS -malign-loops=2 -malign-jumps=2 -malign-functions=2";;
esac

AC_ARG_ENABLE(debug,     [  --enable-debug          Produce an executable with debugging symbols], [TR_CFLAGS="-g -Wall "; TR_CXXFLAGS="-g -Wall"])

AC_ARG_ENABLE(debug-rel,     [  --enable-debug-rel          Produce an executable with debugging symbols], [TR_CFLAGS="-g -O3 -Wall -ffast-math -fexpensive-optimizations -malign-loops=2 -malign-functions=2"; TR_CXXFLAGS="-g -Wall -O3 -ffast-math -fexpensive-optimizations -malign-loops=2 -malign-functions=2"])

AC_ARG_ENABLE(profile,[  --enable-profile      Produce a profiled executable],  [TR_CFLAGS="-g -pg"; TR_CXXFLAGS="-g  -pg"])

AC_ARG_ENABLE(pedantic,  [  --enable-pedantic       Enable -pedantic (and -ansi for C) when compiling], TR_CFLAGS="$TR_CFLAGS -ansi -pedantic"; TR_CXXFLAGS="$TR_CXXFLAGS -pedantic")

AC_ARG_ENABLE(macosx_bundle,[  --enable-macosx-bundle      Produce a MacOSX bundle executable],  [TR_CPPFLAGS="$TR_CPPFLAGS -DWITH_MACOSX_BUNDLE";])

dnl --------------------------------------------------------------------------
dnl Check if compiling for Win32
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for Win32 platform])
AC_EGREP_CPP(yes,
[ 
#if defined(WIN32) || defined(__CYGWIN__)
  yes
#endif
], is_win32=yes, is_win32=no )
AC_MSG_RESULT([$is_win32])

dnl Add libs required for Windows
dnl I don't use -mwindows since I like having the console around
dnl If the console annoys you then remove "-luser32 -lgdi32" and replace
dnl with "-mwindows"
if test "x$is_win32" = "xyes" ; then
    TR_LIBS="$TR_LIBS -luser32 -lgdi32"
fi

dnl --------------------------------------------------------------------------
dnl Check if compiling for MacOSX
dnl --------------------------------------------------------------------------
AC_MSG_CHECKING([for MacOSX platform])
AC_EGREP_CPP(yes,
[ 
#if defined(__APPLE__) || defined(MACOSX)
  yes
#endif
], is_macosx=yes, is_macosx =no )
AC_MSG_RESULT([$is_macosx])

if test "x$is_macosx" = "xyes" ; then
    CFLAGS="$CFLAGS -I/System/Library/Frameworks/Carbon.framework/Libraries/CIncludes"
    GL_CPPFLAGS="$GL_CPPFLAGS -framework OpenGL"
    GLUT_CPPFLAGS="$GLUT_CPPFLAGS -framework GLUT"
    with_gl_inc=/System/Library/Frameworks/Carbon.framework/Libraries/CIncludes
    with_gl_libs=/System/Library/Frameworks/OpenGL.framework/Libraries
    with_expat_libs=/sw/lib
    with_png_libs=/sw/lib
    with_jpeg_libs=/sw/lib
    with_jpeg_inc=/sw/include
    with_expat_inc=/sw/include
    with_png_inc=/sw/include
    PYTHON_LDOPTS="-L/Library/Frameworks/Python.framework"
    with_python_inc=/Library/Frameworks/Python.framework/Headers
    TR_LIBS="$TR_LIBS -lobjc"
else
    TR_LIBS="$TR_LIBS -lutil"
fi

dnl
dnl check for Python
dnl
dnl for now support automake versions < 1.5 for 2 reasons:
dnl  - it is not available on some distros (SuSE, RedHat, ...)
dnl  - it can not find python 2.2 in many other cases (debian, ...)
dnl 
dnl AM_PATH_PYTHON(2.2)
dnl
AC_MSG_CHECKING([for python])

FOUND_PYTHON=no
PYTHON_CFLAGS=""
PYTHON_LIBS=""

PYTHON_binchk="python python2 python2.2 python2.3"
for i in ${PYTHON_binchk};
do
    PYTHON_check=`$i -V 2>/dev/null; echo $?`
    if test ${PYTHON_check} -eq 0;
    then
        FOUND_PYTHON=yes
    fi

    dnl
    dnl Change autoconf quote characters temporarily.
    dnl
    changequote(<<, >>)dnl

    if test "x${FOUND_PYTHON}" = "xyes";
    then
        PYTHON_VERSION=`$i -V 2>&1 | awk '{print $NF}'`
        if test `echo ${PYTHON_VERSION} | sed -e 's/\./ /g; s/[a-z|A-Z]/ /g' | awk '{print $1$2}'` -ge 22;
        then
            FOUND_PYTHON=yes
            PYTHON_SHORT=`echo ${PYTHON_VERSION} | sed -e 's/\./ /g; s/[a-z|A-Z]/ /g' | awk '{print $1"."$2}'`
            PYTHON_incchk="/usr/include/python /usr/include/python${PYTHON_SHORT} /usr/local/include/python /usr/local/include/python${PYTHON_SHORT}"
        else
            FOUND_PYTHON=no
        fi
    fi


    dnl
    dnl Reset autoconf quote characters to brackets.
    dnl
    changequote([, ])dnl

    if test "x${FOUND_PYTHON}" = "xyes";
    then
        PYTHON=$i
        break
    fi
done

PYTHON_incdir=""
if test "x${FOUND_PYTHON}" = "xyes";
then
    for i in ${PYTHON_incchk};
    do
        if test -f "$i/Python.h";
	then
            PYTHON_incdir=$i
            break
        fi
    done
fi

if test "x${PYTHON_incdir}" = "x";
then
    FOUND_PYTHON=no
fi

if test "x${FOUND_PYTHON}" = "xno";
then
    AC_MSG_ERROR([*** Python version 2.2 or later not found!])
fi
AC_MSG_RESULT([python ${PYTHON_VERSION}])

dnl Simple check for libpython2.2.so
if test "x${FOUND_PYTHON}" = "xyes";
then
    FOUND_LIBPYTHON_SO=no
    PYTHON_libchk="/usr/lib /usr/local/lib /sw/lib/python${PYTHON_SHORT}/config /usr/lib/python${PYTHON_SHORT} /usr/lib/python${PYTHON_SHORT}/config /usr/local/lib/python${PYTHON_SHORT} /usr/local/lib/python${PYTHON_SHORT}/config /lib/python2.2/config"
    for i in ${PYTHON_libchk};
    do
	
        if test -f $i/libpython${PYTHON_SHORT}.so;
        then
	    echo "$i/libpython${PYTHON_SHORT}.so yes"
	    PYTHON_CFLAGS="-I${PYTHON_incdir}"
	    if test "x$is_macosx" = "xyes" ; then
	    	    PYTHON_LIBS="-lpython${PYTHON_SHORT} --export-dynamic"
	    else
		    PYTHON_LIBS="-lpython${PYTHON_SHORT} -Xlinker -export-dynamic"
	    fi
            FOUND_LIBPYTHON_SO=yes
            break
	else
          if test -f $i/libpython${PYTHON_SHORT}.a;	   
	  then
            echo "$i/libpython${PYTHON_SHORT}.a yes"
    	    PYTHON_CFLAGS="-I${PYTHON_incdir}"
	    if test "x$is_macosx" = "xyes" ; then
	    	    PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.a --export-dynamic"
	    else
	    	    PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.a  -Xlinker -export-dynamic"
	    fi
            FOUND_LIBPYTHON_SO=yes
	    break
          else
            if test -f $i/libpython${PYTHON_SHORT}.dll.a;	   
	    then
              echo "$i/libpython${PYTHON_SHORT}.dll.a yes"
    	      PYTHON_CFLAGS="-I/usr/include/python2.2"
	      PYTHON_LIBS="$i/libpython${PYTHON_SHORT}.dll.a  -Xlinker -export-dynamic"
              FOUND_LIBPYTHON_SO=yes
            else
              echo "$i/libpython${PYTHON_SHORT}.so no"
            fi
	  fi
        fi
    done
fi

dnl if test "x${FOUND_LIBPYTHON_SO}" = "xyes";
dnl then
dnl    PYTHON_CFLAGS="-I${PYTHON_incdir}"
dnl    PYTHON_LIBS="-lpython${PYTHON_SHORT}"
dnl fi

if test "x${FOUND_LIBPYTHON_SO}" = "xno";
then
    echo
    echo "Missing {python-prefix}/lib/libpython${PYTHON_SHORT}.so"
    echo "Try to create the shared library using (root priviledge required):"
    echo "    su -c 'sh ./build_libpython_so.sh'"
    echo
    AC_MSG_WARN([*** Python shared library not found!])
else
    PYTHON_CPPFLAGS="$PYTHON_CPPFLAGS $PYTHON_CFLAGS -DHAVE_PYTHON=1 "
fi
AC_SUBST(PYTHON_LIBS)
dnl --------------------------------------------------------------------------
dnl Check for car sim
dnl --------------------------------------------------------------------------
AC_ARG_ENABLE(car,     [  --enable-car          Produce an executable for car simulation], [TR_CPPFLAGS="$TR_CPPFLAGS -DCAR_SIM "; echo "making car simulator"])
dnl --------------------------------------------------------------------------
dnl Check for network protocol
dnl --------------------------------------------------------------------------

AC_ARG_ENABLE(tcp,[  --enable-tcp      Use TCP (defaults to UDP)],  [tcp=no])
AC_ARG_ENABLE(udp,[  --enable-udp      Use UDP (this is default)],  [udp=no])

if test "x$tcp$udp" = "xnono" ; then
    echo "*** Both UDP and TCP protocol are enabled : using default UDP
protocol"
    TR_CPPFLAGS="$TR_CPPFLAGS -D_UDP_PROTO"
else
	if test "x$tcp" = "xno" ; then
	    TR_CPPFLAGS="$TR_CPPFLAGS -D_TCP_PROTO"
	    echo "Configuring for TCP network protocol"
	else
		if test "x$udp" = "xno" ; then
		    echo "Configuring for UDP network protocol"
		    TR_CPPFLAGS="$TR_CPPFLAGS -D_UDP_PROTO"
		else
		    echo "Configuring for UDP network protocol"
		    TR_CPPFLAGS="$TR_CPPFLAGS -D_UDP_PROTO"
		   fi
	fi
fi


dnl --------------------------------------------------------------------------
dnl Check for SDL
dnl --------------------------------------------------------------------------

AC_ARG_ENABLE(sdl,[  --enable-sdl      Use SDL],  [sdl=no])
if test "x$sdl" != "xno" ; then

SDL_VERSION=1.0.1
AM_PATH_SDL($SDL_VERSION, have_SDL=yes, have_SDL=no)

if test "x$have_SDL" = "xyes" ; then
    TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDL=1"
    TR_CFLAGS="$TR_CFLAGS $SDL_CFLAGS"
    TR_CXXFLAGS="$TR_CXXFLAGS $SDL_CFLAGS"
    TR_LIBS="$TR_LIBS $SDL_LIBS"

    dnl Check for joystick support in SDL
    saved_LIBS="$LIBS"
    LIBS="$saved_LIBS $TR_LIBS"

    AC_CHECK_FUNCS( SDL_JoystickOpen, 
                    have_SDL_joystick=yes, have_SDL_joystick=no )

    if test "x$have_SDL_joystick" = "xno" ; then
        echo "*** This version of SDL doesn't have joystick support."
        echo "*** Configuring without joystick support."
    fi
USERSDL="1"
AC_ARG_ENABLE(nosdl,[  --enable-nosdl Use if you do not wish to use SDL to manage mouse],USERSDL="0")
	if test "$USERSDL" = "1" ; then
		TR_CPPFLAGS="$TR_CPPFLAGS -DSDL_WINDOWING=1" 
		echo "Using SDL Windowing System"
	else
		echo "Using GLUT Windowing System"
	fi
    dnl Check for SDL_mixer
dnl    AC_CHECK_LIB( SDL_mixer, Mix_OpenAudio, 
dnl                  have_SDL_mixer=yes, have_SDL_mixer=no )

dnl    if test "x$have_SDL_mixer" = "xyes" ; then 
dnl	TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDL_MIXER=1" 
dnl        TR_LIBS="$TR_LIBS -lSDL_mixer"
dnl    else
dnl        echo "*** SDL_mixer not found.  Configuring without audio support."
dnl    fi

dnl	Added a simple check to see if we can use libSDL_net
	AC_CHECK_HEADER( SDL/SDL_net.h, have_SDL_net=yes, have_SDL_net=no)
	if test "x$have_SDL_net" = "xyesBLAH" ; then
		NET_LIBS=" -lSDL_net"
		TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_SDLnet"
	else
		NET_LIBS=""
		echo "*** SDL_net not found.  Configuring with standard sockets support."
	fi
	AC_SUBST(NET_LIBS)

    LIBS="$saved_LIBS"
else
    echo "*** SDL not found.  Configuring without audio or joystick support."
fi
else
    echo "*** SDL disabled. Configuring without audio or joystick support."
fi

dnl --------------------------------------------------------------------------
dnl Check for GL library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(gl-libs,      [  --with-gl-libs=DIR      GL/MesaGL library location])
AC_ARG_WITH(gl-lib-name,  [  --with-gl-lib-name=NAME GL library name])

if test "x$with_gl_libs" = "x" ; then
    GL_LDOPTS=""
else
    GL_LDOPTS="-L$with_gl_libs"
fi

saved_LIBS="$LIBS"

AC_DEFUN( CHECK_FOR_GL_LIB, [
    AC_MSG_CHECKING([for $GL_LIB_NAME library])
    LIBS="$saved_LIBS $TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME"
    AC_TRY_LINK( , , have_GL=yes, have_GL=no)
    AC_MSG_RESULT([$have_GL])

    if test "x$have_GL" = "xyes" ; then
	TR_LIBS="$TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME"

    else
	dnl Try with -lpthread

	AC_MSG_CHECKING([for $GL_LIB_NAME library (with pthreads)])
	LIBS="$saved_LIBS $TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME -lpthread"
	AC_TRY_LINK( , , have_GL=yes, have_GL=no)
	AC_MSG_RESULT([$have_GL])

	if test "x$have_GL" = "xyes" ; then
	    TR_LIBS="$TR_LIBS $GL_LDOPTS -l$GL_LIB_NAME -lpthread"
	fi
    fi
])

AC_DEFUN( FIND_GL_LIB, [
    if test "x$with_gl_lib_name" = "x" ; then
        GL_LIB_NAME="GL"
    else
        GL_LIB_NAME="$with_gl_lib_name"
    fi

    CHECK_FOR_GL_LIB

    if test "x$have_GL" = "xno" -a "x$with_gl_lib_name" = "x" ; then
        GL_LIB_LIST=`grep -v -E "^$GL_LIB_NAME\$" <<EOF
GL
MesaGL
opengl32
EOF
`

        for GL_LIB_NAME in $GL_LIB_LIST ; do
            CHECK_FOR_GL_LIB

            if test "x$have_GL" = "xyes" ; then
                break;
            fi
        done
    fi
])

FIND_GL_LIB

if test "x$have_GL" = "xno" -a "x$GL_LDOPTS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL libraries installed in the standard"
    echo "*** location (/usr/lib).  I'll check in /usr/X11R6/lib, since"
    echo "*** many distributions (incorrectly) put OpenGL libs there."
    GL_LDOPTS="-L/usr/X11R6/lib"
    FIND_GL_LIB
fi

if test "x$have_GL" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL library])
fi

if test "x$is_win32" = "xno" -a x$is_macosx = xno; then
    dnl Make sure GL lib is up-to-date
    AC_CHECK_FUNCS( glXGetProcAddressARB, gl_up_to_date=yes, gl_up_to_date=no )

    if test "x$gl_up_to_date" = "xno" ; then
	AC_MSG_ERROR([Your copy of OpenGL is out of date. If using Mesa, make sure you have version >= 3.2.])
    fi
fi

LIBS="$saved_LIBS"




dnl --------------------------------------------------------------------------
dnl Check for GLU library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(glu-libs,      [  --with-glu-libs=DIR      GLU/MesaGLU library location])
AC_ARG_WITH(glu-lib-name,  [  --with-glu-lib-name=NAME GLU library name])

if test "x$with_glu_libs" = "x" ; then
    GLU_LDOPTS=""
else
    GLU_LDOPTS="-L$with_glu_libs"
fi

saved_LIBS="$LIBS"

AC_DEFUN( CHECK_FOR_GLU_LIB, [
    AC_MSG_CHECKING([for $GLU_LIB_NAME library])
    LIBS="$saved_LIBS $TR_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME"
    AC_TRY_LINK( , , have_GLU=yes, have_GLU=no)
    AC_MSG_RESULT([$have_GLU])

    if test "x$have_GLU" = "xyes" ; then
	TR_LIBS="$TR_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME"

    else
	dnl Try with -lpthread

	AC_MSG_CHECKING([for $GLU_LIB_NAME library (with pthreads)])
	LIBS="$saved_LIBS $TR_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME -lpthread"
	AC_TRY_LINK( , , have_GLU=yes, have_GLU=no)
	AC_MSG_RESULT([$have_GLU])

	if test "x$have_GLU" = "xyes" ; then
	    TR_LIBS="$TR_LIBS $GLU_LDOPTS -l$GLU_LIB_NAME -lpthread"
	fi
    fi
])

AC_DEFUN( FIND_GLU_LIB, [
    if test "x$with_glu_lib_name" = "x" ; then
        GLU_LIB_NAME="GLU"
    else
        GLU_LIB_NAME="$with_glu_lib_name"
    fi

    CHECK_FOR_GLU_LIB

    if test "x$have_GLU" = "xno" -a "x$with_glu_lib_name" = "x" ; then
        GLU_LIB_LIST=`grep -v -E "^$GLU_LIB_NAME\$" <<EOF
GLU
MesaGLU
openglu32
EOF
`

        for GLU_LIB_NAME in $GLU_LIB_LIST ; do
            CHECK_FOR_GLU_LIB

            if test "x$have_GLU" = "xyes" ; then
                break;
            fi
        done
    fi
])

FIND_GLU_LIB

if test "x$have_GLU" = "xno" -a "x$GLU_LDOPTS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGLU libraries installed in the standard"
    echo "*** location (/usr/lib).  I'll check in /usr/X11R6/lib, since"
    echo "*** many distributions (incorrectly) put OpenGLU libs there."
    GLU_LDOPTS="-L/usr/X11R6/lib"
    FIND_GLU_LIB
fi

if test "x$have_GLU" = "xno" ; then
    AC_MSG_ERROR([Cannot find GLU library])
fi

LIBS="$saved_LIBS"





dnl --------------------------------------------------------------------------
dnl Check for OpenGL headers
dnl --------------------------------------------------------------------------

AC_ARG_WITH(gl-inc,   [  --with-gl-inc=DIR       OpenGL header file location])

if test "x$with_gl_inc" = "x" ; then
    GL_CPPFLAGS=""
else 
    GL_CPPFLAGS="$GL_CPPFLAGS -I$with_gl_inc"
fi

dnl check for gl.h
saved_CPPFLAGS="$CPPFLAGS"
AC_DEFUN( CHECK_FOR_GL_H, [
    CPPFLAGS="$saved_CPPFLAGS $GL_CPPFLAGS $TR_CPPFLAGS"

    AC_MSG_CHECKING([for GL/gl.h])
    if test "x$is_macosx" = "xyes" ; then
        have_gl_h=yes
    else
        AC_TRY_CPP( [ #include <GL/gl.h> ], have_gl_h=yes, have_gl_h=no )
    fi
    AC_MSG_RESULT([$have_gl_h])
])

CHECK_FOR_GL_H

if test "x$have_gl_h" = "xno" -a "x$GL_CPPFLAGS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenGL headers installed in the standard"
    echo "*** location (/usr/include).  I'll check in /usr/X11R6/include, since"
    echo "*** many distributions (incorrectly) put OpenGL headers there."
    GL_CPPFLAGS="-I/usr/X11R6/include"
    CHECK_FOR_GL_H
fi

if test "x$have_gl_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL/gl.h])
fi

dnl Check for glext.h
if test "x$is_macosx" = "xyes" ; then
    have_glext_h=yes
else
    AC_CHECK_HEADERS( "GL/glext.h", have_glext_h=yes, have_glext_h=no )
fi

if test "x$have_glext_h" = "xno" ; then
    AC_MSG_ERROR([
*****************************************************************
You are missing the file glext.h.
You can get a copy at
http://oss.sgi.com/projects/ogl-sample/ABI/glext.h
Place it in the directory /usr/include/GL.
*****************************************************************])
fi

dnl Check that glext.h version is recent enough
AC_MSG_CHECKING([whether glext.h is recent enough]);
if test "x$is_macosx" = "xno" ; then
AC_EGREP_CPP(yes,
[
#include <GL/glext.h>
#if defined(GL_GLEXT_VERSION) && GL_GLEXT_VERSION >= 6
 yes
#endif
], is_glext_h_recent=yes, is_glext_h_recent=no )
else
    is_glext_h_recent=yes
fi

AC_MSG_RESULT([$is_glext_h_recent])

if test "x$is_glext_h_recent" = "xno" ; then
    AC_MSG_ERROR([
*****************************************************************
Your copy of glext.h is out of date.
You can get a copy of the latest version at
http://oss.sgi.com/projects/ogl-sample/ABI/glext.h
Place it in the directory /usr/include/GL.
*****************************************************************])
fi

CPPFLAGS="$saved_CPPFLAGS"
TR_CPPFLAGS="$TR_CPPFLAGS $GL_CPPFLAGS"


dnl --------------------------------------------------------------------------
dnl Check for glut library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(glut-libs,[  --with-glut-libs=DIR    Location of GLUT library])

if test "x$with_glut_libs" = "x" ; then
    GLUT_LDOPTS="$GLUT_LDOPTS"
else
    GLUT_LDOPTS="-L$with_glut_libs"
fi

AC_DEFUN( CHECK_FOR_GLUT_LIB, [
    AC_MSG_CHECKING([for $GLUT_LIB_NAME library])
    if test "x$is_macosx" = "xyes" ; then
        LIBS="$saved_LIBS $TR_LIBS $GLUT_LDOPTS -framework GLUT"
    else
	saved_LDFLAGS=$LDFLAGS
	LDFLAGS="-L/usr/X11R6/lib $saved_LDFLAGS"
        LIBS="$saved_LIBS $TR_LIBS $GLUT_LDOPTS -l$GLUT_LIB_NAME -lXi -lXmu"
    fi
    AC_TRY_LINK( , , have_glut_lib=yes, have_glut_lib=no )
    AC_MSG_RESULT([$have_glut_lib])
])
LDFLAGS="$saved_LDFLAGS"
saved_LIBS="$LIBS"

GLUT_LIB_LIST="glut32 glut"

for GLUT_LIB_NAME in $GLUT_LIB_LIST ; do
    CHECK_FOR_GLUT_LIB

    if test "x$have_glut_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_glut_lib" = "xno" ; then
    AC_MSG_ERROR([GLUT library not found or too old version. 3.7 (beta) or later required.])
fi

LIBS="$saved_LIBS -lXi -lXmu"
if test "x$is_macosx" = "xyes" ; then
    TR_LIBS="$TR_LIBS $GLUT_LDOPTS -framework GLUT"
else
    TR_LIBS="$TR_LIBS $GLUT_LDOPTS -l$GLUT_LIB_NAME  -lXi -lXmu"
fi


dnl --------------------------------------------------------------------------
dnl Check for glut.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(glut-inc, [  --with-glut-inc=DIR     Specify GLUT header file location])

if test "x$with_glut_inc" = "x" ; then
    GLUT_CPPFLAGS="$GLUT_CPPFLAGS"
else
    GLUT_CPPFLAGS="-I$with_glut_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$saved_CPPFLAGS $TR_CPPFLAGS $GLUT_CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    have_glut_h=yes
else
    AC_CHECK_HEADER([GL/glut.h], have_glut_h=yes, have_glut_h=no )
fi
if test "x$have_glut_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find GL/glut.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
TR_CPPFLAGS="$TR_CPPFLAGS $GLUT_CPPFLAGS"


dnl --------------------------------------------------------------------------
dnl Check for expat library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(expat-libs,[  --with-expat-libs=DIR    Location of expat library])

if test "x$with_expat_libs" = "x" ; then
    EXPAT_LDOPTS=""
else
    EXPAT_LDOPTS="-L$with_expat_libs"
fi

AC_DEFUN( CHECK_FOR_EXPAT_LIB, [
    AC_MSG_CHECKING([for $EXPAT_LIB_NAME library])
    LIBS="$EXPAT_LDOPTS -l$EXPAT_LIB_NAME"
    AC_TRY_LINK( , , have_expat_lib=yes, have_expat_lib=no )
    AC_MSG_RESULT([$have_expat_lib])
]) 

saved_LIBS="$LIBS"

EXPAT_LIB_LIST="expat"

for EXPAT_LIB_NAME in $EXPAT_LIB_LIST ; do
    CHECK_FOR_EXPAT_LIB

    if test "x$have_expat_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_expat_lib" = "xno" ; then
    AC_MSG_ERROR([Expat library not found])
fi

LIBS="$saved_LIBS"
TR_LIBS="$TR_LIBS $EXPAT_LDOPTS -l$EXPAT_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for expat.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(expat-inc, [  --with-expat-inc=DIR     Specify expat header file location])

if test "x$with_expat_inc" = "x" ; then
    EXPAT_CPPFLAGS=""
else
    EXPAT_CPPFLAGS="-I$with_expat_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $EXPAT_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $TR_CPPFLAGS $EXPAT_CPPFLAGS "
fi
AC_CHECK_HEADER([expat.h], have_expat_h=yes, have_expat_h=no )

if test "x$have_expat_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find expat.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
TR_CPPFLAGS="$TR_CPPFLAGS $EXPAT_CPPFLAGS"



dnl --------------------------------------------------------------------------
dnl Check for png library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(png-libs,[  --with-png-libs=DIR    Location of png library])

if test "x$with_png_libs" = "x" ; then
    PNG_LDOPTS=""
else
    PNG_LDOPTS="-L$with_png_libs"
fi

AC_DEFUN( CHECK_FOR_PNG_LIB, [
    AC_MSG_CHECKING([for $PNG_LIB_NAME library])
    LIBS="$PNG_LDOPTS -l$PNG_LIB_NAME"
    AC_TRY_LINK( , , have_png_lib=yes, have_png_lib=no )
    AC_MSG_RESULT([$have_png_lib])
]) 

saved_LIBS="$LIBS"

PNG_LIB_LIST="png png12"

for PNG_LIB_NAME in $PNG_LIB_LIST ; do
    CHECK_FOR_PNG_LIB

    if test "x$have_png_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_png_lib" = "xno" ; then
    AC_MSG_ERROR([Png library not found])
fi

LIBS="$saved_LIBS"
TR_LIBS="$TR_LIBS $PNG_LDOPTS -l$PNG_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for png.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(png-inc, [  --with-png-inc=DIR     Specify png header file location])

if test "x$with_png_inc" = "x" ; then
    PNG_CPPFLAGS=""
else
    PNG_CPPFLAGS="-I$with_png_inc"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $PNG_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $TR_CPPFLAGS $PNG_CPPFLAGS "
fi
AC_CHECK_HEADER([png.h], have_png_h=yes, have_png_h=no )

if test "x$have_png_h" = "xno" ; then
    AC_MSG_ERROR([Cannot find png.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
TR_CPPFLAGS="$TR_CPPFLAGS $PNG_CPPFLAGS"










dnl --------------------------------------------------------------------------
dnl Check for jpeg library
dnl --------------------------------------------------------------------------
AC_ARG_WITH(jpeg-libs,[  --with-jpeg-libs=DIR    Location of jpeg library])

if test "x$with_jpeg_libs" = "x" ; then
    JPEG_LDOPTS=""
else
    JPEG_LDOPTS="-L$with_jpeg_libs"
fi

AC_DEFUN( CHECK_FOR_JPEG_LIB, [
    AC_MSG_CHECKING([for $JPEG_LIB_NAME library])
    LIBS="$JPEG_LDOPTS -l$JPEG_LIB_NAME"
    AC_TRY_LINK( , , have_jpeg_lib=yes, have_jpeg_lib=no )
    AC_MSG_RESULT([$have_jpeg_lib])
]) 

saved_LIBS="$LIBS"

JPEG_LIB_LIST="jpeg"

for JPEG_LIB_NAME in $JPEG_LIB_LIST ; do
    CHECK_FOR_JPEG_LIB

    if test "x$have_jpeg_lib" = "xyes" ; then
        break;
    fi
done

if test "x$have_jpeg_lib" = "xno" ; then
    AC_MSG_ERROR([Jpeg library not found])
fi

LIBS="$saved_LIBS"
TR_LIBS="$TR_LIBS $JPEG_LDOPTS -l$JPEG_LIB_NAME"


dnl --------------------------------------------------------------------------
dnl Check for jpeg.h
dnl --------------------------------------------------------------------------

AC_ARG_WITH(jpeg-inc, [  --with-jpeg-inc=DIR     Specify jpeg header file location])

if test "x$with_jpeg_inc" = "x" ; then
    JPEG_CPPFLAGS=""
else
    JPEG_CPPFLAGS="-I$with_jpeg_inc -DJPEG_SUPPORT"
fi

saved_CPPFLAGS="$CPPFLAGS"
if test "x$is_macosx" = "xyes" ; then
    CPPFLAGS="$saved_CPPFLAGS $JPEG_CPPFLAGS "
else
    CPPFLAGS="$saved_CPPFLAGS $TR_CPPFLAGS $JPEG_CPPFLAGS "
fi
AC_CHECK_HEADER([jpeglib.h], have_jpeg_h=yes, have_jpeg_h=no )
if test "x$have_jpeg_h" = "xno" ; then
    AC_MSG_WARN([Cannot find jpeg.h])
fi

CPPFLAGS="$saved_CPPFLAGS"
TR_CPPFLAGS="$TR_CPPFLAGS $JPEG_CPPFLAGS"









dnl --------------------------------------------------------------------------
dnl Check for openal library
dnl --------------------------------------------------------------------------
USEROPENAL="1"
AC_ARG_ENABLE(nosound,[  --enable-nosound Use if you do not wish to have sound],USEROPENAL="0")

AC_ARG_WITH(openal-libs,[  --with-openal-libs=DIR    Location of openal library])
if test "$USEROPENAL" = "1" ; then
    if test "x$with_openal_libs" = "x" ; then
        OPENAL_LDOPTS=""
    else
        OPENAL_LDOPTS="-L$with_openal_libs"
    fi

    AC_DEFUN( CHECK_FOR_OPENAL_LIB, [
        AC_MSG_CHECKING([for $OPENAL_LIB_NAME library])
        LIBS="$OPENAL_LDOPTS -l$OPENAL_LIB_NAME"
        AC_TRY_LINK( , , have_openal_lib=yes, have_openal_lib=no )
        AC_MSG_RESULT([$have_openal_lib])
    ]) 

    saved_LIBS="$RRLIBS"
    
    OPENAL_LIB_LIST="openal"
    
    for OPENAL_LIB_NAME in $OPENAL_LIB_LIST ; do
        CHECK_FOR_OPENAL_LIB
    
        if test "x$have_openal_lib" = "xyes" ; then
            LIBS="$saved_LIBS"
    	    TR_LIBS="$TR_LIBS $OPENAL_LDOPTS -l$OPENAL_LIB_NAME"
            break;
        else
	    LIBS=""
	    saved_LIBS=""
        fi
    done

fi


dnl --------------------------------------------------------------------------
dnl Check for OpenAL headers
dnl --------------------------------------------------------------------------

AC_ARG_WITH(al-inc,   [  --with-al-inc=DIR       OpenAL header file location])

if test "x$with_al_inc" = "x" ; then
    AL_CPPFLAGS=""
else 
    AL_CPPFLAGS="-I$with_al_inc"
fi

dnl check for al.h
saved_CPPFLAGS="$CPPFLAGS"

AC_DEFUN( CHECK_FOR_AL_H, [
    CPPFLAGS="$saved_CPPFLAGS $AL_CPPFLAGS"
    if test "x$is_macosx" = "xno" ; then
        CPPFLAGS=" $TR_CPPFLAGS"
    fi

    AC_MSG_CHECKING([for AL/al.h])
    AC_TRY_CPP( [ #include <AL/al.h> ], have_al_h=yes, have_al_h=no )
    AC_MSG_RESULT([$have_al_h])
])

CHECK_FOR_AL_H

if test "x$have_al_h" = "xno" -a "x$AL_CPPFLAGS" = "x" ; then
    echo "*** Hmm, you don't seem to have OpenAL headers installed in the standard"
    echo "*** location (/usr/include).  I'll check in /usr/local/include, since"
    echo "*** many distributions put OpenAL headers there."
    AL_CPPFLAGS="-I/usr/local/include"
    CHECK_FOR_AL_H
fi
if test "x$have_openal_lib" = "xno" ; then
    echo "Cannot find openal library"
    echo "Error::Configuring without OpenAL support!"
else
    if test "x$have_al_h" = "xno" ; then
        echo "Cannot find AL/al.h"
        echo "Error::Configuring without OpenAL support!"
    else
      dnl Check for alext.h 
      AC_CHECK_HEADERS( "AL/alext.h", have_alext_h=yes, have_alext_h=no )

      if test "x$have_alext_h" = "xno" ; then
      AC_MSG_ERROR([
        *****************************************************************
        You are missing the file alext.h.
        Place it in the directory /usr/include/AL.
        *****************************************************************])
      fi
      if test $USEROPENAL = "1" ; then
        echo "Configuring with OpenAL support!"
        TR_CPPFLAGS="$TR_CPPFLAGS -DHAVE_AL=1" 
      else
        echo "Disabling OpenAL on user request"
      fi   
    fi
fi


CPPFLAGS="$saved_CPPFLAGS" 
TR_CPPFLAGS="$TR_CPPFLAGS $AL_CPPFLAGS"







CPPFLAGS="$saved_CPPFLAGS" 


USERGTKL="1"
AC_ARG_ENABLE(nogtk,[  --enable-nogtk Use if you do not wish to have herlper apps],USERGTKL="0")

if test "$USERGTKL" = "1" ; then
   dnl Check for Gtk+ define GTK_CFLAGS && GTK_LIBS
   AM_PATH_GTK(1.2.1,,
	AC_MSG_ERROR([Cannot find GTK+ - gtk-config missing from path?]))
fi
	

dnl --------------------------------------------------------------------------
dnl Other options
dnl --------------------------------------------------------------------------

dnl Turn use of stencil buffer on/off
AC_ARG_ENABLE(stencil-buffer,[  --enable-stencil-buffer Use if your hardware has a stencil buffer],TR_CPPFLAGS="$TR_CPPFLAGS -DUSE_STENCIL_BUFFER")

dnl Specify data directory
AC_ARG_WITH(data-dir,[  --with-data-dir=PATH    Default vegastrike data directory],TR_CPPFLAGS="$TR_CPPFLAGS -DDATA_DIR=\\\"$withval\\\"")


AC_SUBST(TR_CPPFLAGS)
AC_SUBST(TR_CFLAGS)
AC_SUBST(TR_CXXFLAGS)
AC_SUBST(TR_LIBS)
AC_SUBST(PYTHON_CPPFLAGS)
BOOST_CPPFLAGS="-I../boost -I../../boost -I../src/boost -DUSE_BOOST_128"
BOOST_LIBS="../src/boost/libpython_boost.a"
TESTUSEBOOST129="0"
AC_ARG_ENABLE(boost-129,[  --enable-boost-129 Use if your compiler has trouble with boost-128],TESTUSEBOOST129="1")

if test "$TESTUSEBOOST129" = "1" ; then
   BOOST_CPPFLAGS="-I../boost129 -I../../boost129 -I../src/boost129 -DUSE_BOOST_129"
   BOOST_LIBS="../src/boost129/libpython_boost.a"
fi

AC_SUBST([BOOST_LIBS])
AC_SUBST([BOOST_CPPFLAGS])

CPPFLAGS="$CPPFLAGS $TR_CPPFLAGS $PYTHON_CPPFLAGS $BOOST_CPPFLAGS "
CFLAGS="$CFLAGS $TR_CFLAGS  "
CXXFLAGS="$CXXFLAGS $TR_CXXFLAGS "
LIBS="$LIBS $TR_LIBS $PYTHON_LIBS"
AC_OUTPUT(Makefile src/Makefile src/gldrv/Makefile src/aldrv/Makefile src/gfx/Makefile src/cmd/Makefile src/cmd/ai/Makefile src/cmd/collide/Makefile src/cmd/script/Makefile src/cmd/script/c_alike/Makefile src/cmd/collide/csgeom/Makefile src/python/Makefile launcher/Makefile src/networking/Makefile src/boost/Makefile objconv/Makefile src/gui/Makefile src/common/Makefile src/boost129/Makefile src/boost129/converter/Makefile src/boost129/object/Makefile)

