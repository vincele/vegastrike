/* 
 * Vega Strike
 * Copyright (C) 2003 Mike Byron
 * 
 * http://vegastrike.sourceforge.net/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

#ifndef __BUTTON_H__
#define __BUTTON_H__

#include "control.h"
#include "painttext.h"

// See cpp file for detailed descriptions of classes, functions, etc.

// The NewButton class supports the normal button control.  It can be
// pressed by the mouse, and, by default, send a command out when
// it is pressed.

class NewButton : public Control
{
public:
    // "Look" of the button.  Useful in drawing.
    enum {
        NORMAL_STATE = 0,        // Normal state of a button.
        DOWN_STATE,              // Pressed down.
        HIGHLIGHT_STATE,         // Mouse is over button, but not pressed.
        DISABLED_STATE,          // Pressing the button does nothing.
        FINAL_BUTTON_STATE = DISABLED_STATE        // Last value *we've* defined.
    };

    // Set the button state.  If the state changes, it will redraw.
    // The button state is an "int" so that derived classes can add new
    // values.  Use pre-existing enum values if possible.
    virtual void setDrawingState(int newState);
    virtual int drawingState(void);

    // The command ID generated by a button when it is pressed.
    virtual void setCommand(EventCommandId id) { m_commandId = id; };
    virtual EventCommandId command(void) { return m_commandId; } ;

    // Label that appears on the button.
    virtual void setLabel(std::string l) { m_label = l; };
    virtual std::string label(void) { return m_label; };

    // Color when mouse is over button.
    virtual void setHighlightColor(const GFXColor& c) { m_highlightColor = c; };
    virtual GFXColor highlightColor(void) { return m_highlightColor; } ;

    // Width of shadow lines in pixels.
    virtual void setShadowWidth(float width) { m_shadowWidth = width; };
    virtual float shadowWidth(void) { return m_shadowWidth; };

    // Draw the button.
    virtual void draw(void);

    // OVERRIDES
    virtual bool processMouseDown(const InputEvent& event);
    virtual bool processMouseUp(const InputEvent& event);

    // CONSTRUCTION
public:
    NewButton(void);
    virtual ~NewButton(void) {};

protected:
    // INTERNAL IMPLEMENTATION

    // This function is called when the button is pressed.
    // Override to change the behavior.
    virtual void sendButtonCommand(void);

    // VARIABLES
protected:
    int m_drawingState;                 // How the button looks.
    EventCommandId m_commandId;         // The command to send when pressed.
    std::string m_label;                // The text on this button.
    bool m_leftPressed;                 // True = Mouse-down and no mouse-up yet.
    GFXColor m_highlightColor;          // Highlighted button color.
    float m_shadowWidth;                // Line width of shadows in pixels.
    PaintText m_paintText;              // Object that displays label.
};

#endif   // __BUTTON_H__
