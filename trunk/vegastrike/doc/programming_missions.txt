Programming Missions for Vegastrike
-----------------------------------

Documentation written by Alexander Rawass <alexannika@users.sourceforge.net>


Module	      = <module name="name"> { Script }* </module>
Script	      = <script name="script_name"> { Statement }* </script>

Statement     = If | Block | Setvar | Exec | Call | While
If	      = <if> BoolExpr Then Else </if>
Then	      = Statement
Else	      = Statement
Block	      = <block> { Statement }* </block>
While	      = <while> BoolExpr Statement </while>
Setvar	      = <setvar name="varname"> Expression </setvar>

Expression    = BoolExpr | FloatExpr | VarExpr | ConstExpr
 
BoolExpr      = AndOrExpr | NotExpr | TestExpr | BoolVarExpr
AndOrExpr     = AndExpr | OrExpr
AndExpr	      = <and> BoolExpr BoolExpr { BoolExpr }* </and>
OrExpr	      = <or> BoolExpr BoolExpr { BoolExpr }* </or>
NotExpr	      = <not> BoolExpr </not>
TestExpr      = <test test="gt|lt|eq|ge|le"> FloatExpr FloatExpr </test>
BoolVarExpr   = VarExpr

FloatExpr     = FloatVarExpr | FloatMathExpr
FloatVarExpr  = VarExpr
FloatMathExpr = <fmath math="+|-|*|/"> FloatExpr FloatExpr { FloatExpr }* </fmath>

VarExpr	      = <var name="name">
ConstExpr     = <const type="float|bool" value="value"/>


How does it work?
-----------------

If a mission file has got a <module> tag, that will mean programmed missions.

The module that programs a mission has to be named "director".

A module can contain module variables and scripts.

One of the scripts has to have the name "startup", the other "loop", to be called at game startup and in the game loop.


Variables
---------

There are 3 different scopes of variables:
- global variables (read/write from any module)
- module variables (read/write from it's module, read-only from other module)
- script variables

The module variables from the "director" module are also called mission variables.

The mission,module and global variables will be saved to disk at game end, and they get loaded at game startup.

By setting global and module/mission variables, different missions can 'communicate' with each other.


Runtime
-------

The runtime structure consists of:
- a list of all threads			vector<missionThread *> threads;
- a map of the known modules		map<string,missionNode *> modules;
- a map of the global variables		map<string,missionNode *> global_variables;

At game startup, the game jumps into 'DirectorStart' method.

There, a new missionThread is created and added to the list of threads.


In the game loop, the game jumps into 'DirectorLoop'.

missionThread
-------------

A missionThread consists of a stack of contextStacks, the exec_stack.

Every time a 'script','block' or 'exec' statement is executed, a new contextStack is generated.
